<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>云图-Blog</title>
  
  <subtitle>那些未完成的梦</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yaoyue47.github.io/"/>
  <updated>2020-11-29T13:05:13.552Z</updated>
  <id>https://yaoyue47.github.io/</id>
  
  <author>
    <name>姚越</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>秋招</title>
    <link href="https://yaoyue47.github.io/2020/11/29/%E7%A7%8B%E6%8B%9B/"/>
    <id>https://yaoyue47.github.io/2020/11/29/%E7%A7%8B%E6%8B%9B/</id>
    <published>2020-11-29T13:04:46.000Z</published>
    <updated>2020-11-29T13:05:13.552Z</updated>
    
    <content type="html"><![CDATA[<h1 id="9月15日"><a href="#9月15日" class="headerlink" title="9月15日"></a>9月15日</h1><p>今日参加了<strong>京东方</strong>的宣讲会，了解了宣讲会大致流程。</p><p>也就开篇介绍公司成就，再说我们招聘哪些岗位，如何投报简历，以及最后答疑</p><p>要是以后的宣讲会都是这种模子的话感觉去的意义不大</p><p>大体总结一下京东方，做显示器面板的一家硬件公司，看着专利很多，福利待遇也还不错。</p><p>我在知乎上看到评价说晋升的空间小，薪水提升的不多，让我有些心凉</p><p>最让我膈应的是那个工作人员最后临走时说的一句话</p><p>他说：一般工学院的本科也就去职能部比较多，硕士的话去开发岗位的比较多。</p><p>不知道他指的职能部是不是那种客服一类的工作。</p><h1 id="9月20日"><a href="#9月20日" class="headerlink" title="9月20日"></a>9月20日</h1><p>完成最后有个项目的上线，同时简历完成，开始投递</p><ul><li><strong>仙乐健康</strong> IT工程师 提交简历<ul><li>流程还蛮麻烦的，先是在手机上提交再转到电脑端。</li><li>邮件即时回复</li></ul></li><li><strong>思特奇</strong>信息技术股份有限公司 java开发岗 提交简历<ul><li>招牌信息蛮low的，但是比较偏向于计算机方法，而且java招200+的人</li><li>直接发邮件提交的简历，没有即时回复</li></ul></li><li><strong>国泰新点</strong>软件股份有限公司 java开发岗 提交简历<ul><li>专业可以是理工类的</li><li>直接发邮件提交的，没有及时回复</li></ul></li></ul><h1 id="9月21日"><a href="#9月21日" class="headerlink" title="9月21日"></a>9月21日</h1><p>今日报名了<strong>携程</strong>的校招，已经投递了还蛮有意思的</p><p>携程先是和仙乐健康一样的提交网站，流程比仙乐还麻烦，基本是算是查户口的感觉</p><p>其次还要求做有个测试，在线做的，估计是评测个人性格思维什么的吧</p><p>一共分为4个测试</p><ul><li>第一个是给一大段话让你提炼出关键的信息。</li><li>第二个是给很对很多的表格让你提炼信息</li><li>第三个是给抽线的图像让你找到规律并猜下一个</li><li>第四个是给3维空间的物体让你想象三视图</li></ul><p>前2个蛮煎熬的，后面2个还行</p><p>第一次接触到这种评测，感觉很新颖</p><h1 id="9月22日"><a href="#9月22日" class="headerlink" title="9月22日"></a>9月22日</h1><p>报名了<strong>大华技术股份有限公司</strong> 投递简历</p><p>没啥好说的，他们的报名后台和仙乐健康，携程一样的，同样都是查户口般的调查，还问你紧急联系人的联系方式什么的</p><p>其他到没什么，这个公司在安农有校招宣讲会，可惜在安徽不招计算机方向的。</p><p>听别人说工资蛮高的。</p><h1 id="9月24日"><a href="#9月24日" class="headerlink" title="9月24日"></a>9月24日</h1><p>报名了<strong>浙江邦盛科技</strong>有限公司</p><p>先说报名，他们用的是另一套报名系统，感觉还可以，终于不用查户口了</p><p>反思了一下，似乎自己的简历还可以优化，感觉当初写的实习经历太草率了</p><ul><li>原版</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">负责子系统的全栈开发工作</span><br></pre></td></tr></table></figure><ul><li>改版</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">参加其中一个关于机房自动监控的项目。我主要负责其中的系统架构设计和后端开发工作。了解并学习到了 java 后端开发以及前端调用的相关基础知识</span><br></pre></td></tr></table></figure><p>不知道会不会好一些</p><p>前面的几个报名都过去几天了，一个消息都没有回复。我有些沮丧，其他的部分朋友很快就收到面试通知了，虽然他们不是计算机方向的，可是还是有些不爽。</p><p>再看看吧</p><h1 id="9月26日"><a href="#9月26日" class="headerlink" title="9月26日"></a>9月26日</h1><p>收到朋友的提醒，决定不仅仅依赖学校的招生公众号。在boss直聘上面注册了信息。</p><p>先顺手投了<strong>boss直聘</strong>的校招。</p><p>他们的这个系统好像是那种打招呼的形式，还在研究中</p><p>又投递了<strong>天源迪科</strong>的校招，是直接投递的邮箱的。</p><p>天源迪科好像很早就在学校招生的公众号看到过，今天又在boss直聘上看到过，所以就投了一下</p><h1 id="9月27日"><a href="#9月27日" class="headerlink" title="9月27日"></a>9月27日</h1><p>今日进展比较多，我一点一点捋一下</p><p>boss直聘还是蛮不错的，我主动沟通的有部分已经回我了，也有些hr主动找我。虽然大部分主动的hr都是招二本和大专的，但是也算是利好消息。</p><p>我收到了<strong>天源迪科</strong>的笔试邮件通知，在29号晚上，也算是开始秋招一来第一场面试吧。</p><p>北京<strong>思特奇</strong>信息技术股份有限公司也收到了邮件回复和测试邀请，算了一下距离我投递简历都过去了一周了，办事效真的慢</p><p>而且要下载他们公司的app写一大堆东西，ohhhhh我吐了，放弃放弃</p><p>同时<strong>boss直聘</strong>的投递也有回复了，虽然还没说简历有没有通过。</p><p>以上是秋招进展。</p><p>今晚与一位巨牛攀谈一番，得到了一些信息，这里总结一下</p><p>巨牛是暑假期间开始投递了，也投递了3个月，大概投递了100多份简历，最后斩获了7，8个office。他在一开始的几个月也是收获寥寥，但是到了9，10月份，开始面一个过一个。所以9，10月份确实是旺季。</p><p>其次巨牛提醒了我要开始刷面试的题了，虽然一直都在学，但是没有系统的刻意去针对面试去刷题。巨牛推荐去牛客网刷一刷，我今晚打算去看看。今天晚上被巨牛当成面试者临时拷问，问的问题都没有回答完整，感觉汗都要下来了，底气又低了一些，唉。</p><p>最后是自己的感悟，虽然只投递了大概7，8份简历，但是还是感觉很无力，总觉得专业不对口，没有底气。考研的意向上升了。</p><h1 id="9月28日"><a href="#9月28日" class="headerlink" title="9月28日"></a>9月28日</h1><p>今天早上突然想明白了一件事情：</p><p>找工作一共3个流程，投简历，笔试，面试。简历看的是你的学历，笔试是看的是你的刷题刷的多不多，面试才是看你的项目和奖。也就是说要想找到满意的工作，学历，刷题，项目与奖缺一不可。</p><p>之前还是太native了。</p><p>我的好多投递应该是第一层就被刷掉了。</p><p>今日烦躁，没有投递。</p><p>安心复习java去了，明天晚上笔试呢</p><h1 id="9月29日"><a href="#9月29日" class="headerlink" title="9月29日"></a>9月29日</h1><p>今日进展颇丰</p><p>首先是今晚参加了<strong>天源迪科</strong>的宣讲会+笔试，宣讲会是一些基本的介绍公司什么的，来的人不多，而且应聘职能岗的人比应聘开发岗的人要多。我在笔试后问了一下那个讲师关于学历的问题，他说对专业没有特别严格的要求，辅修也可以。</p><p>关于笔试：全是选择题，分为4个模块，java，数据库，大数据，推理。题目比较简单，全是选择题。我java做的还不错，数据库没有复习，有些知识忘得比较多了。大数据则是完全不会。总体来说还可以吧，不知道会不会收到面试邀请。</p><p>其次<strong>大华技术股份有限公司</strong>终于给我发测试邀请了，也是足足一个星期。</p><p>也是和携程用的一个平台，考的都是java题，很有难度，有些地方问的很深，有那位大牛给我做面试测试的那个程度。有30多道选择题和一道递归编程题和一道tcp3次招收和4次挥手的解答题。真的蛮难的。</p><p>再者是<strong>携程</strong>也给我发笔试邀请了，定的是10月13日的在线笔试。蛮正规的。</p><p>最后我忍着恶心还是下了北京<strong>思特奇</strong>信息技术股份有限公司的app，做的简直和屎一样也好意思拿出来。那个代码都对不齐我写个鬼哦</p><p>做完考试我就卸载了。等通知吧</p><p>对了，今天晚上做了这么多的笔试，发现确实有很多重复的题目，也就是说靠刷题确实可行</p><p>今日又发现一个宝藏网站 赛码网，明天去那里投投简历看看</p><h1 id="9月30日"><a href="#9月30日" class="headerlink" title="9月30日"></a>9月30日</h1><p><strong>boss直聘</strong>又给我发了一下笔试邀请的消息，定的是10月15日。</p><p>今日投递了<strong>深圳市法本信息技术有限公司</strong>的java岗，他们找的人有些少，只找5个人，但还是去试试。</p><p>网申通道投了一次，邮箱又投了一次。</p><p>他们的网申通道是前程无忧的平台，怎么说呢，卡的一批，差点都没耐心写下去了。但是不算那种查户口就还好。</p><p>本来想投递<strong>京东</strong>试试看的，没想到他们平台强制要求上传照片，我手头也没有合适的工作照，想了想还是算了，反正也肯定不会过。</p><p>不过意外的学到了管培生的这个概念：说的是公司为了培养管理层的人才而制定的计划，大部分只招应届生，取得前几年会让你去公司各个部门各个职位去做，最后选择一个最适合你的岗位让你去做，感觉还不错。</p><p>臭不要脸的投递了<strong>字节跳动</strong>，哈哈，反正也没希望，去感受了一波氛围，不得不说不愧是最大的互联网公司，招聘网站比其他的公司做的好太多太多了，网页给人的感觉非常舒服。一份简历投了2个岗位，还在网上搜了一下内推码，美滋滋。</p><h1 id="10月2日"><a href="#10月2日" class="headerlink" title="10月2日"></a>10月2日</h1><p>投递了<strong>浙江保融科技有限公司</strong>的软件开发岗，是boss直聘上找的。和邦盛用的一个招聘系统</p><h1 id="10月5日"><a href="#10月5日" class="headerlink" title="10月5日"></a>10月5日</h1><p>很久没更新了，主要是国企期间hr也不干活</p><p>今日收到<strong>浙江保融科技有限公司</strong>的笔试申请，定于10月10日。</p><h1 id="10月6日"><a href="#10月6日" class="headerlink" title="10月6日"></a>10月6日</h1><p>今日胡思乱想：</p><p>内卷是啥意思？假设社会上所有的工作的薪水分为2K,4K,6K,8K,10K的阶级。原本有8K实力的人找到8K薪水的工作，6K实力找6K薪水的工作，大家各安其职，都很开心。可是有一天因为某些原因10K的工作突然少了一半，那么这些有10K实力的人不会失业，他们会找那些8K薪水的工作，所以就又有这么多8K实力的人因为10K实力的人的竞争而失去工作，所以他们就会去抢6K薪水的工作，依次类推。最后结果如何？最后的结果就是每一个阶级的人都只能拿到低于自身水平的薪水。而处在2K阶级的人他们将失去工作。</p><p>这就是行业的内卷。只是最高层的阶级出现了一些小变化。整个行业从上到下都会巨变。</p><p>而导致这一切的根源可能是疫情或者其他原因导致的GDP的下滑。</p><p>这就是内卷，我们能做的就是尽可能的让自己拥有8K,10K的实力，这样等内卷开始的时候不至于输的那么丢人。</p><p>其次说一下我的一个朋友的故事，他也是找工作，今日在BOOS直聘上面被一家公司主动找来面试，是管培生，要求马上就开启实习。而且面试很水。具体问这家公司主要是干什么的也说不上来。后来在一些其他的网络平台发现这家公司就是个骗子。公司注册资金才3W元，无论你应聘什么岗位最后都是去推销POS机的。所以说求职路上要谨慎啊，骗子还是蛮多的。</p><h1 id="10月9日"><a href="#10月9日" class="headerlink" title="10月9日"></a>10月9日</h1><p>今天收到了<strong>天源迪科</strong>的电话，定于明天的面试。打电话的听口音是给我们做宣讲的那位。祝我好运，虽然没有什么准备。</p><h1 id="10月10日"><a href="#10月10日" class="headerlink" title="10月10日"></a>10月10日</h1><p>上午去参加了面试，<strong>天源迪科</strong>确实很漂亮，很大，有那种高级公司的感觉了。面试我的是一个很专业的中年人，在一个单独2个人的面试间面的。问了以下问题：</p><ul><li>数组和链表的区别</li><li>计算机网络有多少层，都是干什么的。</li><li>tcp/ip的协议组，3次招手和4次挥手，为什么挥手比招手多一次。</li><li>树和栈的分析</li><li>计算机底层硬件方面有哪些你熟知的</li><li>http协议中发送的数据包里面都有什么</li><li>为什么选择后端，后端有哪些分类？</li><li>问了一些简历上面的奖项都是做了什么项目</li></ul><p>总体来说其实我答得不怎么样，不过这位面试官人倒是还蛮好的，我有地方说不下去的他都会帮我接一下。</p><p>面试之后就是hr直接和我谈了，说我通过了面试。薪资是实习5K，转正6.5K，福利待遇什么的都还蛮好，问我第三方协议什么的回去催一下辅导员。</p><p>下午就给我发了offer。</p><p>然后是下午的<strong>浙江保融科技有限公司</strong>的笔试</p><p>不得不说，这是我目前做过的最高级的笔试了，浏览器录屏加共享屏幕，手机用小程序被锁定了。考试很严谨。</p><p>可惜难度也是一顶一的</p><p>考了计算机基础方面（选择题），Java（选择题），数据库的SQL的编写，Java 的实际编程题，以及个人信息补充什么的。</p><p>选择题方面还是有很多重复的题目，看来他们笔试都共用一套题库。。</p><p>sql语句的编写倒还是第一次考，有些不熟练。</p><p>java的编程题第一题是给一个String，返回这个String中最后一个单词的长度，比如“I am your father”，因为father是6个单词，所以返回6。第二题是给一个数组，返回子连续数组的最大值。比如[1,2,5,9,-1]，返回1+2+5+9=17</p><p>编程题倒是比较简单，因为可以用编译器。</p><p>以上。</p><h1 id="10月11日"><a href="#10月11日" class="headerlink" title="10月11日"></a>10月11日</h1><p>中午一觉醒来发现自己错过了<strong>字节跳动</strong>的笔试，淦！给自己提了个醒，以后做事要有计划有条理，已经发生几次了！</p><h1 id="10月12日"><a href="#10月12日" class="headerlink" title="10月12日"></a>10月12日</h1><p>今日投递了<strong>南京富士通南大软件技术有限公司</strong> 的后端开发，用的也是前程无忧的系统，所以什么都不用填就可以提交上去了，美滋滋</p><p>同时也邮件提交了<strong>合肥酷町堂网络科技有限公司</strong>的青少儿编程教师，反正闲着也是闲着。</p><p>投递了<strong>中联农业机械股份有限公司</strong>的后端开发，投递系统应该是他们自己的系统，做的不错</p><h1 id="10月13日"><a href="#10月13日" class="headerlink" title="10月13日"></a>10月13日</h1><p>今日参加<strong>携程</strong>的笔试，淦，大厂果然是大厂，考的题目难得一批，一共有20道选择题，3道编程题</p><ul><li>一个饮料售货机可以收10，50，100的纸币，也只会退这些种类的纸币。现在你要买x瓶饮料，价格是m，你有a张10元，b张20，张100元的。你会优先使用大额钞票，请问你买完x瓶一共投币了多少次？</li><li>第二题题目都没看懂</li><li>给你字符串数组，都是“a[10]”,”a[15]=1”.”a[a[]13] = a[a[9]]”之类的编程代码。判断哪一行发生了数组越界</li></ul><p>考的心态爆炸，一个小时我就交卷了。</p><h1 id="10月14日"><a href="#10月14日" class="headerlink" title="10月14日"></a>10月14日</h1><p>今日参加了<strong>中国核工业二三建设有限公司</strong>的宣讲会</p><p>怎么说呢，不愧是国企，一天工作8个小时，一周上5天，都赶上公务员了，工资也还过得去实习5k多，转正6k多，看着宣传片确实有些心动。可惜在合肥没有岗位，最近的也是连云港或者三澳的地方，而且在核电厂工作，可能会比较苦吧。</p><p>他们感觉好像很饥渴的感觉，上来宣讲会后就是现场投简历，然后一起面试，问你自我介绍，对于我们公司的看法，对于核电事业的看法，对于先择业后就业的看法，就是比较水嘛，也没看什么打分什么的，然后就紧接着问你要第三方协议了，太快了，都不给人考虑的时间，</p><p>我的辅修应该是还是有些被人歧视我感觉，他们公司应该算是只要专业对口的人就直接进的那种，可是到了我这里还要考核，唉，不过反正我也不打算签三方</p><p>面试的时候碰到了女朋友他们的班长，确实很优秀，奖学金，奖项，实习都还不错。小伙也比较精神。他说他本来打算跨考的，可惜他们辅修的今年开了太多课了，实在没办法出来找工作。看来每个人都有每个人的难处啊，想转方向确实很辛苦。</p><p>什么时候问一下导员三方协议倒是是什么玩意。感觉蛮重要的。</p><h1 id="10月15日"><a href="#10月15日" class="headerlink" title="10月15日"></a>10月15日</h1><p>问了导员第三方协议的一些问题，好像不太要紧不会影响毕业的，签了可以毁约，但是要交毁约费，反正我也不打算签，还是拒绝吧。</p><p>下午在图书馆做题的时候收到了<strong>安徽兆尹科技公司</strong>的hr电话，把我吓一跳。我是没有投这家公司的，他们的hr主动打电话给我说我们在前程无忧上面看到你的简历了，我们10月27日在安农有宣讲会，可以来笔试和面试什么的。</p><p>我倒是很诧异，到时候去看看吧。看他们给的资料看起来还不错。</p><p>最后是今晚参加了<strong>BOSS直聘</strong>的笔试，总结一下</p><p>先是10道傻逼题，不管他</p><p>然后是30到多选的计算机基础题，好多好多都是出现了好多次的题目。都做吐了都。</p><p>然后是3道编程题，虽然我没有怎么发挥好，但是总体来看的话整体难度和携程的要简单一个档次</p><ul><li>给你2个很大很大的字符串数组，判断第一个字符串数组中有没有字符串在第二个数组中，有的话输出这个字符串</li><li>给你一个很大很大的字符串，判断其中有没有敏感词，有的话按照顺序输出敏感词。</li><li>给你一个很大很大的整数数组，输出其中的中位数，最大数，最小数，和TP90的数(大小的排名占数组的第90%位)</li></ul><p>感觉这些题目要是刷刷题的话肯定能过那种</p><h1 id="10月17日"><a href="#10月17日" class="headerlink" title="10月17日"></a>10月17日</h1><p>邮箱投递了<strong>北京宇信科技集团股份有限公司</strong>的java岗，他们昨天是有来安农的宣讲会的，没去错过了。</p><p>根据一般的经验，去线下的宣讲会一般成功几率比较高</p><p>邮箱投递了<strong>安徽乐堂控股集团有限责任公司</strong>的java岗，也是有宣讲会没去，听说他们是做动漫手游的。</p><h1 id="10月18日"><a href="#10月18日" class="headerlink" title="10月18日"></a>10月18日</h1><p>今日碰到那位20W的大佬，攀谈得到一些新的信息</p><p>合肥的工资确实不高，他是在南京拿的20W。</p><p>如果能上安农的研究生可以关注一下尧元的，朱军的实验室，听说出了2个sci。</p><h1 id="10月27日"><a href="#10月27日" class="headerlink" title="10月27日"></a>10月27日</h1><p>很久没写了，今天参加了最后一场的宣讲会，也算是今年的总结吧</p><p>去了<strong>安徽兆尹科技公司</strong>的宣讲会+笔试+面试，是一起搞定的。宣讲会中规中矩，这家公司应该和<strong>天源迪科</strong>差不多都是做外包的，只不过他们是给银行做外包的，算是高级外包吧。加班和出差很多，这个也算是外包的通病吧，就是不知道给我多少钱。</p><p>笔试有些怪，80分是那种智力题，那种逻辑判断和概率论那种题目，只有20分的技术题，考了到算法题，不过只需要给思路，不用实现还是蛮好评的</p><ul><li>一到一百万的排序</li><li>给出一到一百万中所有的质数</li></ul><p>然后就是标准的数据库的mysql语句编写。</p><p>笔试完了就马上接着技术面试，面试官是位头发比较少的技术人员吧，看起来也是蛮和蔼的，问到了一下东西：</p><ul><li><p>自我介绍</p></li><li><p>提到了我做的项目，因为我说了一下我项目中使用了redis，就问了redis相关的知识</p></li><li><p>mysql中的char和varchar的区别</p></li><li><p>java的序列化</p></li><li><p>java的反射</p></li><li><p>Servlet</p></li></ul><p>等等，感觉我答得还不错，比他们计算机科班的甚至都有些流畅。（顺带一提，我旁边2个计算机科班的真的是拉跨，笔试分数低又没啥本事）</p><p>然后直接HR面试，问了家在哪，期望薪资，能否接受加班，薪资组成，是否有其他offer，其他offer的薪资如何，加班补贴什么的，聊的也是蛮开心的。</p><p>就回去等通知了，感觉应该是可以接到offer的，可惜是家外包，加班和出差蛮多的，应该给的钱再也不去。</p><p>在面试的过程中碰到了几位朋友，一位是我们这一届的计算机科班，他是已经获得了<strong>国泰新点</strong>的offic，9K5的工资，我翻了一下我的投递记录，确实投过这家但是没回复，估计是简历关直接pass了，看来计算机的学历真的挺值钱。</p><p>然后是一位安农的农业工程与测试技术的研究学长，他也是安徽理工大学本科，想考211结果调剂到安徽农业大学，看来我认识的好多研究生学长都是调剂回来安农的。</p><p>其实今天收获还是蛮大的吧，一位朋友让我坚定了考计算机的决心，一位学长让我坚定了考211的决定。</p><p>明天开启总结。</p><h1 id="11月7日"><a href="#11月7日" class="headerlink" title="11月7日"></a>11月7日</h1><p>今天去参加了最后的笔试<strong>北京宇信科技集团股份有限公司</strong>。</p><p>这公司怎么说呢..10月17日投的简历，5日才给我发笔试邮件，办事效率确实低。</p><p>网上查了一下，也是一家外包公司，做金融的，和上一家的<strong>安徽兆尹科技公司</strong>的情况有点像。</p><p>再说笔试，系统应该是他们自己做的吧，连切换tab监测的功能都没有，也就是说可以百度作弊。</p><p>题目有专业题（前端，js，jQ，数据库，java），语句分析题，数学规律题什么的，反正都是选择题。想吐槽的一点是我投的java岗结果笔试大部分都是前端的题目，奇了怪了。</p><h1 id="11月29日"><a href="#11月29日" class="headerlink" title="11月29日"></a>11月29日</h1><p>这次应该才算是真的最后一次记录了</p><p><strong>大华技术股份有限公司</strong>给我电话初试复试和hr复试了，搞得花里胡哨，问的问题也是水的一批，最后也是没过，估计是一位我说我打算考研吧，反正也不重要了。</p><p>今年的秋招就到这里吧，最大的收获就是我要考研了。懒得总结了，累了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;9月15日&quot;&gt;&lt;a href=&quot;#9月15日&quot; class=&quot;headerlink&quot; title=&quot;9月15日&quot;&gt;&lt;/a&gt;9月15日&lt;/h1&gt;&lt;p&gt;今日参加了&lt;strong&gt;京东方&lt;/strong&gt;的宣讲会，了解了宣讲会大致流程。&lt;/p&gt;
&lt;p&gt;也就开篇介绍公司成
      
    
    </summary>
    
    
    
      <category term="招聘" scheme="https://yaoyue47.github.io/tags/%E6%8B%9B%E8%81%98/"/>
    
  </entry>
  
  <entry>
    <title>设计模式那点事</title>
    <link href="https://yaoyue47.github.io/2020/08/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E9%82%A3%E7%82%B9%E4%BA%8B/"/>
    <id>https://yaoyue47.github.io/2020/08/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E9%82%A3%E7%82%B9%E4%BA%8B/</id>
    <published>2020-08-24T02:38:50.000Z</published>
    <updated>2020-08-28T08:17:06.552Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工厂模式（创建型）"><a href="#工厂模式（创建型）" class="headerlink" title="工厂模式（创建型）"></a>工厂模式（创建型）</h2><p><strong>意思</strong>：我要一个东西，不需要自己去实例化，告诉工厂这个东西的名字就可以返回这个实例</p><p><strong>用途</strong>：作为一种创建类模式，在任何需要生成复杂对象的地方，都可以使用工厂方法模式</p><p><strong>代码</strong>：</p><ol><li><p>创建一个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>写3个类继承这个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"SquareSquareSquareSquareSquare"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"RectangleRectangleRectangleRectangle"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"CircleCircleCircleCircle"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建一个工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(str==<span class="string">"Circle"</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Circle();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(str==<span class="string">"Rectangle"</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Rectangle()</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(str==<span class="string">"Square"</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Square();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Factory factory=<span class="keyword">new</span> Factory();</span><br><span class="line"> </span><br><span class="line">      Shape shape1 = factory.getShape(<span class="string">"Circle"</span>);</span><br><span class="line">      shape1.draw();</span><br><span class="line">      Shape shape2 = factory.getShape(<span class="string">"RECTANGLE"</span>);</span><br><span class="line">      shape2.draw();</span><br><span class="line">      Shape shape3 = factory.getShape(<span class="string">"Square"</span>);</span><br><span class="line">      shape3.draw();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="单例模式（创建型）"><a href="#单例模式（创建型）" class="headerlink" title="单例模式（创建型）"></a>单例模式（创建型）</h2><p><strong>意思</strong>：保证这个类永远只能存在一个</p><p><strong>用途</strong>：为了线程安全</p><p><strong>代码</strong>：</p><ol><li><p>创建一个单例类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleObject</span></span>&#123;</span><br><span class="line">    <span class="comment">//将构造方法私有化，使得外部无法调用构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleObject</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//声明一个私有变量为自己的实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleObject obj = <span class="keyword">new</span> SingleObject();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//静态方法提供给外界获得实例的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleObject <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(obj==<span class="keyword">null</span>)&#123;</span><br><span class="line">            obj = <span class="keyword">new</span> SingleObject();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获得这个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//不合法的构造函数</span></span><br><span class="line">      <span class="comment">//编译时错误：构造函数 SingleObject() 是不可见的</span></span><br><span class="line">      <span class="comment">//SingleObject object = new SingleObject();</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取唯一可用的对象</span></span><br><span class="line">      SingleObject obj = SingleObject.getInstance();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//显示消息</span></span><br><span class="line">      obj.doSomething();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="外观模式（结构型）"><a href="#外观模式（结构型）" class="headerlink" title="外观模式（结构型）"></a>外观模式（结构型）</h2><p><strong>意思</strong>：客户端不需要知道系统内部的复杂联系，整个系统只需提供一个”接待员”即可</p><p><strong>用途</strong>：子接口太多太乱，用一个大的接口去包含所需要的子接口，调用者只需要知道大接口即可</p><p><strong>代码</strong>：</p><ol><li><p>创建一个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>写3个类继承这个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"SquareSquareSquareSquareSquare"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"RectangleRectangleRectangleRectangle"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"CircleCircleCircleCircle"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建一个外观类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeMaker</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Shape circle;</span><br><span class="line">    <span class="keyword">private</span> Shape rectangle;</span><br><span class="line">    <span class="keyword">private</span> Shape square;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShapeMaker</span><span class="params">()</span></span>&#123;</span><br><span class="line">        circle = <span class="keyword">new</span> Circle();</span><br><span class="line">        rectangle = <span class="keyword">new</span> Rectangle();</span><br><span class="line">        square = <span class="keyword">new</span> Square();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建大的方法来统一管理小的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">draw1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        circle.draw();</span><br><span class="line">        square.draw();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">draw2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        square.draw();</span><br><span class="line">        rectangle.draw();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用外观类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FacadePatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      ShapeMaker shapeMaker = <span class="keyword">new</span> ShapeMaker();</span><br><span class="line"> </span><br><span class="line">      shapeMaker.draw1();</span><br><span class="line">      shapeMaker.draw2();    </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="代理模式（结构型）"><a href="#代理模式（结构型）" class="headerlink" title="代理模式（结构型）"></a>代理模式（结构型）</h2><p><strong>意思</strong>：当直接访问一个类不方便的时候可以在这个类的基础上再封装一个访问层(中间层)，用来做一些控制</p><p><strong>用途</strong>：比如说win10的快捷方式</p><p><strong>代码</strong>：</p><ol><li><p>创建一个真实类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealObject</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String str;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RealObject</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.str=str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>创建一个代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyObject</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> RealObject realobject;</span><br><span class="line">    <span class="keyword">public</span> String str;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyObject</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.str=str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">proxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(realobject==<span class="keyword">null</span>)&#123;</span><br><span class="line">            realobject = <span class="keyword">new</span> RealObject(str);</span><br><span class="line">        &#125;</span><br><span class="line">        realobject.getsr();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用代理模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyPatternDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        ProxyObject proxyobject = <span class="keyword">new</span> ProxyObject(<span class="string">"111"</span>);</span><br><span class="line">        proxyobject.proxy();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="观察者模式（行为型）"><a href="#观察者模式（行为型）" class="headerlink" title="观察者模式（行为型）"></a>观察者模式（行为型）</h2><p><strong>意思</strong>：我们希望被观察对象的实例变量被改变后，其他观察者可以得到通知，传统的方式是在被观察对象中一个一个通知，不方便修改，所以改进后为订阅/发布的方式，观察者订阅被观察者，被观察者需要通知时遍历订阅表即可</p><p><strong>用途</strong>：订阅发布功能</p><p><strong>代码</strong>：</p><ol><li><p>创建被观察对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//创建订阅列表</span></span><br><span class="line">   <span class="keyword">private</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> state;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> state;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.state = state;</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//通知</span></span><br><span class="line">       notifyAllObservers();</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Observer observer)</span></span>&#123;</span><br><span class="line">      observers.add(observer);      </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyAllObservers</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//遍历订阅表</span></span><br><span class="line">       <span class="keyword">for</span> (Observer observer : observers) &#123;          </span><br><span class="line">           observer.update();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建观察者抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Subject subject;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现观察者类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverAAA</span> <span class="keyword">extends</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造函数中将观察者加入订阅表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BinaryObserver</span><span class="params">(Subject subject)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subject = subject;</span><br><span class="line">        <span class="keyword">this</span>.subject.attach(<span class="keyword">this</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;       </span><br><span class="line">       System.out.println(subject.getState()) ); </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverBBB</span> <span class="keyword">extends</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造函数中将观察者加入订阅表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BinaryObserver</span><span class="params">(Subject subject)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subject = subject;</span><br><span class="line">        <span class="keyword">this</span>.subject.attach(<span class="keyword">this</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;       </span><br><span class="line">       System.out.println(subject.getState()) ); </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现观察者模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverPatternDemo</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        Subject subject = <span class="keyword">new</span> Subject();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">new</span> ObserverAAA(subject);</span><br><span class="line">        <span class="keyword">new</span> ObserverBBB(subject);</span><br><span class="line"> </span><br><span class="line">        System.out.println(<span class="string">"First state change: 15"</span>);   </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//自动通知订阅表所有观察者</span></span><br><span class="line">        subject.setState(<span class="number">15</span>);</span><br><span class="line">        System.out.println(<span class="string">"Second state change: 10"</span>);  </span><br><span class="line">        subject.setState(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="策略模式（行为型）"><a href="#策略模式（行为型）" class="headerlink" title="策略模式（行为型）"></a>策略模式（行为型）</h2><p><strong>意思</strong>：定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。比如诸葛亮的锦囊妙计，一个锦囊对应一个妙计。</p><p><strong>用途</strong>：在大量使用if……else……的语句中可以使用策略模式来简化逻辑</p><p><strong>代码</strong>：</p><ol><li><p>创建一个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">operation</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建多个实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Add</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">operation</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> num1 + num2;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subtract</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">operation</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> num1 - num2;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Multiply</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">operation</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> num1 * num2;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建context类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pubic <span class="class"><span class="keyword">class</span> <span class="title">context</span></span>&#123;</span><br><span class="line">    Strategy strategy;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">context</span><span class="params">(Strategy strategy)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doStrategy</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> strategy.operation(num1,num2)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现策略模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyPatternDemo</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        Context context = <span class="keyword">new</span> Context(<span class="keyword">new</span> Add());    </span><br><span class="line">        System.out.println(<span class="string">"10 + 5 = "</span> + context.doStrategy(<span class="number">10</span>, <span class="number">5</span>));</span><br><span class="line">        </span><br><span class="line">        Context context = <span class="keyword">new</span> Context(<span class="keyword">new</span> Subtarct());    </span><br><span class="line">        System.out.println(<span class="string">"10 + 5 = "</span> + context.doStrategy(<span class="number">10</span>, <span class="number">5</span>));</span><br><span class="line">        </span><br><span class="line">        Context context = <span class="keyword">new</span> Context(<span class="keyword">new</span> Multiply());    </span><br><span class="line">        System.out.println(<span class="string">"10 + 5 = "</span> + context.doStrategy(<span class="number">10</span>, <span class="number">5</span>));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;工厂模式（创建型）&quot;&gt;&lt;a href=&quot;#工厂模式（创建型）&quot; class=&quot;headerlink&quot; title=&quot;工厂模式（创建型）&quot;&gt;&lt;/a&gt;工厂模式（创建型）&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;意思&lt;/strong&gt;：我要一个东西，不需要自己去实例化，告诉工厂这
      
    
    </summary>
    
    
    
      <category term="设计模式" scheme="https://yaoyue47.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>spring学习笔记</title>
    <link href="https://yaoyue47.github.io/2020/08/22/spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://yaoyue47.github.io/2020/08/22/spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-08-22T13:16:25.000Z</published>
    <updated>2020-08-22T13:16:47.607Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring学习笔记"><a href="#spring学习笔记" class="headerlink" title="spring学习笔记"></a>spring学习笔记</h1><h3 id="ioc-控制反转"><a href="#ioc-控制反转" class="headerlink" title="ioc 控制反转"></a>ioc 控制反转</h3><p>传统的业务执行的时候会这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HikariConfig config = <span class="keyword">new</span> HikariConfig(); </span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource = <span class="keyword">new</span> HikariDataSource(config);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">getBook</span><span class="params">(<span class="keyword">long</span> bookId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Connection conn = dataSource.getConnection()) &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">return</span> book;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>每次调用需要实例化其他的类，如果业务组件多了的化会组件之间耦合度很高，所以引入控制反转的概念</p><p>将所有的组件所需的实例都交由spring容器管理，每次需要实例的时候由spring统一的注入，这里的注入可以以xml配置文件的形式，可以以注解的形式，也可以以java文件的形式。</p><hr><h3 id="aop切面编程"><a href="#aop切面编程" class="headerlink" title="aop切面编程"></a>aop切面编程</h3><p>本质上是在一个完整的业务流程中就某一点，比如create操作作为切点，在create操作前和操作后做点什么。</p><p>实质为动态代理</p><hr><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>分为编程式事务和声明式事务</p><ul><li><p>编程式事务：比如下面这种使用try。。。catch。。。来实现的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">TransactionStatus tx = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 开启事务:</span></span><br><span class="line">    tx = txManager.getTransaction(<span class="keyword">new</span> DefaultTransactionDefinition());</span><br><span class="line">    <span class="comment">// 相关JDBC操作:</span></span><br><span class="line">    jdbcTemplate.update(<span class="string">"..."</span>);</span><br><span class="line">    jdbcTemplate.update(<span class="string">"..."</span>);</span><br><span class="line">    <span class="comment">// 提交事务:</span></span><br><span class="line">    txManager.commit(tx);</span><br><span class="line">&#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">    <span class="comment">// 回滚事务:</span></span><br><span class="line">    txManager.rollback(tx);</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>声明式的事务：spring使用aop的方式来实现，我们只需使用注解方式即可</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;spring学习笔记&quot;&gt;&lt;a href=&quot;#spring学习笔记&quot; class=&quot;headerlink&quot; title=&quot;spring学习笔记&quot;&gt;&lt;/a&gt;spring学习笔记&lt;/h1&gt;&lt;h3 id=&quot;ioc-控制反转&quot;&gt;&lt;a href=&quot;#ioc-控制反转&quot; cla
      
    
    </summary>
    
    
    
      <category term="spring" scheme="https://yaoyue47.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>redis学习笔记</title>
    <link href="https://yaoyue47.github.io/2020/06/25/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://yaoyue47.github.io/2020/06/25/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-06-25T09:04:31.000Z</published>
    <updated>2020-07-01T14:19:51.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redis的安装"><a href="#redis的安装" class="headerlink" title="redis的安装"></a>redis的安装</h1><ol><li><p>安装redis</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install redis -y</span><br></pre></td></tr></table></figure></li><li><p>启动redis</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start redis</span><br></pre></td></tr></table></figure></li><li><p>设置开机自启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable redis</span><br></pre></td></tr></table></figure></li><li><p>检查端口是否开启（防火墙或者<strong>云服务器的安全组</strong>）</p></li><li><p>设置redis可以远程访问</p><p>编辑<code>/etc/redis.conf</code>文件</p><ul><li><p>注释掉 <code>bind 127.0.0.1</code></p></li><li><p>设置密码<code>requirepass yourpassword</code></p></li></ul></li><li><p>重启redis</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart redis</span><br></pre></td></tr></table></figure></li><li><p>进入redis</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 127.0.0.1 -p 6379 -a &#39;password&#39;</span><br></pre></td></tr></table></figure></li></ol><p><strong>完成</strong></p><h1 id="redis命令"><a href="#redis命令" class="headerlink" title="redis命令"></a>redis命令</h1><p>redis支持5中数据类型：<code>string</code>，<code>hash</code>，<code>list</code>，<code>set</code>，<code>zset</code></p><h3 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h3><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">keys * :返回所有的键，可以模糊匹配，如keys abc*代表以abc开头的keys</span><br><span class="line"></span><br><span class="line">exists key :返回是否存在，存在返回1，不存在返回0</span><br><span class="line"></span><br><span class="line">expire key second :设置key的过期时间</span><br><span class="line"></span><br><span class="line">del key :删除key</span><br><span class="line"></span><br><span class="line">ttl key :查看剩余时间，不存在返回-2，存在但无剩余时间返回-1，其他正常返回时间，秒计</span><br><span class="line"></span><br><span class="line">persist key :取消过期时间</span><br><span class="line"></span><br><span class="line">select : 选择数据库</span><br><span class="line"></span><br><span class="line">randomkey :随机返回一个key</span><br><span class="line"></span><br><span class="line">info :查看数据库信息</span><br><span class="line"></span><br><span class="line">flushdb :清空当前数据库</span><br><span class="line"></span><br><span class="line">flushall :清空所有的数据库</span><br></pre></td></tr></table></figure><h3 id="string命令"><a href="#string命令" class="headerlink" title="string命令"></a>string命令</h3><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">set key value : 赋值命令</span><br><span class="line">setnx key value :如果key不存在，则设值，并返回1，如果key存在，则不设置并返回0 (setnx: set if not exists)</span><br><span class="line">setex key time value :设置值并设置过期时间</span><br><span class="line"></span><br><span class="line">get key value :取值命令</span><br><span class="line"></span><br><span class="line">incr key :自增</span><br><span class="line">incrby key num :自增num值</span><br><span class="line"></span><br><span class="line">decr key :自减</span><br><span class="line">decrby key num :自减num值</span><br></pre></td></tr></table></figure><h3 id="hash命令"><a href="#hash命令" class="headerlink" title="hash命令"></a>hash命令</h3><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">hset key field value :为key设定field&#x2F;value</span><br><span class="line">hmset key field value [fields values] :为key设定多个field&#x2F;value</span><br><span class="line"></span><br><span class="line">hget key field :获取key中对应field中存的值</span><br><span class="line">hmget key field [fields] :获取key中多个field的值</span><br><span class="line">hgetall key :获取key中所有的field和value</span><br><span class="line">hkeys key :获取key中所有的field</span><br><span class="line">hlen key :获取key中所有的field的数量</span><br><span class="line"></span><br><span class="line">hdel key field :删除一个或者多个field</span><br><span class="line"></span><br><span class="line">hsetnx key field value :只有在field不存在的时候才会赋值</span><br><span class="line"></span><br><span class="line">hexists key field :查看field是否存在</span><br><span class="line"></span><br><span class="line">hincrby key field num :field的值自增num</span><br></pre></td></tr></table></figure><h3 id="list命令"><a href="#list命令" class="headerlink" title="list命令"></a>list命令</h3><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">lpush key value [values] :将一个或者多个值依次插入list，左侧添加</span><br><span class="line">rpush key value [values] :将一个或者多个值依次插入list，右侧添加</span><br><span class="line"></span><br><span class="line">llen key :获取list长度</span><br><span class="line">lindex key index :通过索引获取list的元素（0表示第一个，-1表示最后一个，依次类推）</span><br><span class="line">lrange key start stop :获取指定列表范围的元素</span><br><span class="line"></span><br><span class="line">lpop key :移除并获取列表第一个元素（左侧开始）</span><br><span class="line">rpop key :移除并获取列表第一个元素（右侧开始）</span><br><span class="line">blpop key [keys] timeout :左侧移除第一个元素，如果没有则死等，超时就算了</span><br><span class="line"></span><br><span class="line">lset key index value :通过索引设置列表元素的值</span><br><span class="line"></span><br><span class="line">rpoplpush key1 key2 :key1的右侧的值弹出并加入key2的左侧</span><br></pre></td></tr></table></figure><h3 id="set命令"><a href="#set命令" class="headerlink" title="set命令"></a>set命令</h3><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">sadd key member [members] :向一个set中加入member</span><br><span class="line"></span><br><span class="line">scard key :获取set中的成员数</span><br><span class="line">smembers key :返回set中所有的成员值</span><br><span class="line">sismember key member :判断member是不是在这个set中</span><br><span class="line">srandmember key [count] :返回set中一个或者多个随机值</span><br><span class="line"></span><br><span class="line">srem key member [members] :移除set中member</span><br><span class="line">spop key [count] : 随机移除并返回set中一个或者多个成员</span><br><span class="line">smove key1 key2 member :将元素从key1转到key2</span><br><span class="line"></span><br><span class="line">sdiff key1 key2 :返回多个set的差集</span><br><span class="line"></span><br><span class="line">sinter key1 key2 :返回多个set的交集</span><br><span class="line"></span><br><span class="line">sunion key1 key2 : 返回多个set的并集</span><br><span class="line"></span><br><span class="line">sdiffstore key key1 key2 :返回key1和key2的差集并存储在key中</span><br></pre></td></tr></table></figure><h3 id="zset命令-（sorted-set）"><a href="#zset命令-（sorted-set）" class="headerlink" title="zset命令 （sorted set）"></a>zset命令 （sorted set）</h3><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">zadd key score member [scores members] :向zset中加入一个或者多个成员和其分数</span><br><span class="line"></span><br><span class="line">zcard key :返回zset中的成员个数</span><br><span class="line"></span><br><span class="line">zcount key min max :计算在min和max区间中的分数的成员个数</span><br><span class="line">zrank key member :返回zset中指定成员的索引（默认从小到大）</span><br><span class="line">zrange key start stop :通过索引区间返回zset中的成员（小到大）</span><br><span class="line">zrangebyscore key min max :通过分数返回zset中的成员（小到大）</span><br><span class="line">zrevrange key start stop :通过索引区间返回zset中的成员（大到小）</span><br><span class="line">zrevrangebyscore key max min :通过分数返回zset中的成员（大到小）</span><br><span class="line"></span><br><span class="line">zrem key member [members]:移除key中的一个或多个成员</span><br><span class="line">zremrangebyrank key start stop :移除zset中给定区间排名的所有成员（第一名是0）</span><br><span class="line">zremrangebyscore key min max :移除zset中给定分数区间的所有成员</span><br><span class="line"></span><br><span class="line">zincrby key mun member :增加member的分数num</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;redis的安装&quot;&gt;&lt;a href=&quot;#redis的安装&quot; class=&quot;headerlink&quot; title=&quot;redis的安装&quot;&gt;&lt;/a&gt;redis的安装&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装redis&lt;/p&gt;
&lt;figure class=&quot;highlight 
      
    
    </summary>
    
    
    
      <category term="redis" scheme="https://yaoyue47.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>python的tips</title>
    <link href="https://yaoyue47.github.io/2020/06/22/python%E7%9A%84tips/"/>
    <id>https://yaoyue47.github.io/2020/06/22/python%E7%9A%84tips/</id>
    <published>2020-06-22T13:48:20.000Z</published>
    <updated>2020-06-22T14:01:04.153Z</updated>
    
    <content type="html"><![CDATA[<h1 id="替换讨厌的if-else结构"><a href="#替换讨厌的if-else结构" class="headerlink" title="替换讨厌的if/else结构"></a>替换讨厌的if/else结构</h1><p>使用字典结构替换if选择结构</p><p>举例说明：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_price_list</span><span class="params">(user_choice)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> user_choice == <span class="string">'single'</span>:</span><br><span class="line">        print(<span class="number">150</span>)</span><br><span class="line">    <span class="keyword">elif</span> user_choice == <span class="string">'business'</span>:</span><br><span class="line">        print(<span class="number">300</span>)</span><br><span class="line">    <span class="keyword">elif</span> user_choice == <span class="string">'couple'</span>:</span><br><span class="line">        print(<span class="number">500</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"未找到你所需要的房间类型"</span>)</span><br><span class="line"></span><br><span class="line">show_price_list(<span class="string">'couple'</span>)</span><br></pre></td></tr></table></figure><p>使用以下方式替换它！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PRICES = &#123;<span class="string">'single'</span>: <span class="number">150</span>, <span class="string">'business'</span>: <span class="number">300</span>, <span class="string">'couple'</span>: <span class="number">500</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_price_list</span><span class="params">(user_choice)</span>:</span></span><br><span class="line">    print(PRICES.get(user_choice, <span class="string">"未找到你所需要的房间类型"</span>)) <span class="comment"># 使用字典get方式</span></span><br><span class="line"></span><br><span class="line">show_price_list(<span class="string">'couple'</span>)</span><br></pre></td></tr></table></figure><p>执行不同的函数也可以：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'aaaa'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"bbbb"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drink</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"cccc"</span>)</span><br><span class="line">    </span><br><span class="line">choices = &#123;<span class="string">'work'</span>: work, <span class="string">'play'</span>: play, <span class="string">'drink'</span>: drink&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_do</span><span class="params">(user_choice)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        choices.get(user_choice)() <span class="comment"># 使用字典直接获取函数名</span></span><br><span class="line">    <span class="keyword">except</span> TypeError:</span><br><span class="line">        print(<span class="string">"你玩的太溜,我的字典里没有..."</span>)</span><br><span class="line"></span><br><span class="line">to_do(<span class="string">'dance'</span>)</span><br><span class="line">to_do(<span class="string">'drink'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;替换讨厌的if-else结构&quot;&gt;&lt;a href=&quot;#替换讨厌的if-else结构&quot; class=&quot;headerlink&quot; title=&quot;替换讨厌的if/else结构&quot;&gt;&lt;/a&gt;替换讨厌的if/else结构&lt;/h1&gt;&lt;p&gt;使用字典结构替换if选择结构&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
    
      <category term="python" scheme="https://yaoyue47.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>RESTful的api是什么意思？</title>
    <link href="https://yaoyue47.github.io/2020/06/06/RESTful%E7%9A%84api%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D%EF%BC%9F/"/>
    <id>https://yaoyue47.github.io/2020/06/06/RESTful%E7%9A%84api%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D%EF%BC%9F/</id>
    <published>2020-06-06T13:37:44.000Z</published>
    <updated>2020-06-06T13:47:45.066Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RESTful风格的api是什么意思？"><a href="#RESTful风格的api是什么意思？" class="headerlink" title="RESTful风格的api是什么意思？"></a>RESTful风格的api是什么意思？</h1><ul><li><p><strong>看url就知道要什么</strong></p><p>使用名词复数,例如：</p><p>GET /friends/10375923/profile</p><p>GET /admin/1234</p></li><li><p><strong>看request method就知道要干什么</strong></p><p><code>GET</code>是读，<code>POST</code>是增，<code>PUT是</code>改，<code>DELETE</code>是删</p></li><li><p><strong>看状态码就知道结果是什么</strong></p><p>200是正常，500是服务器出错，404是没找到</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RESTful风格的api是什么意思？&quot;&gt;&lt;a href=&quot;#RESTful风格的api是什么意思？&quot; class=&quot;headerlink&quot; title=&quot;RESTful风格的api是什么意思？&quot;&gt;&lt;/a&gt;RESTful风格的api是什么意思？&lt;/h1&gt;&lt;ul&gt;

      
    
    </summary>
    
    
    
      <category term="随笔" scheme="https://yaoyue47.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>学习django的第四天</title>
    <link href="https://yaoyue47.github.io/2020/05/27/%E5%AD%A6%E4%B9%A0django%E7%9A%84%E7%AC%AC%E5%9B%9B%E5%A4%A9/"/>
    <id>https://yaoyue47.github.io/2020/05/27/%E5%AD%A6%E4%B9%A0django%E7%9A%84%E7%AC%AC%E5%9B%9B%E5%A4%A9/</id>
    <published>2020-05-27T14:41:19.000Z</published>
    <updated>2020-06-25T14:25:18.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用django发送邮件"><a href="#使用django发送邮件" class="headerlink" title="使用django发送邮件"></a>使用django发送邮件</h1><p>在<code>settings.py</code>中加入以下配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EMAIL_BACKEND = <span class="string">'django.core.mail.backends.smtp.EmailBackend'</span> <span class="comment"># 照抄即可</span></span><br><span class="line">EMAIL_HOST = <span class="string">'smtp.qq.com'</span> <span class="comment"># 使用邮件商的发送服务器</span></span><br><span class="line">EMAIL_PORT = <span class="number">25</span> <span class="comment"># smtp服务端口 默认25</span></span><br><span class="line">EMAIL_HOST_USER = <span class="string">'2359240697@qq.com'</span> <span class="comment"># 发送方的账号</span></span><br><span class="line">EMAIL_HOST_PASSWORD = <span class="string">''</span> <span class="comment"># 邮件授权码 ，注意是邮件开通服务后的授权码，不是密码</span></span><br></pre></td></tr></table></figure><p>配置后在需要使用时执行以下函数即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.mail <span class="keyword">import</span> send_mail</span><br><span class="line"></span><br><span class="line">send_mail(</span><br><span class="line">       <span class="string">'subject'</span>,  <span class="comment"># 主题</span></span><br><span class="line">       <span class="string">'context'</span>,  <span class="comment"># 内容</span></span><br><span class="line">       <span class="string">'2359240697@qq.com'</span>,  <span class="comment">#邮件的发送方，需要和settings.py中设置的一样才行</span></span><br><span class="line">       [<span class="string">'xxx@qq.com'</span>],   <span class="comment"># 发送对方的邮件地址，需要是列表格式</span></span><br><span class="line">   )</span><br></pre></td></tr></table></figure><h1 id="在django中使用redis"><a href="#在django中使用redis" class="headerlink" title="在django中使用redis"></a>在django中使用redis</h1><ul><li>方式一，依赖于<code>pip3 install redis</code>，适用其他web框架</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis <span class="comment"># 正常不使用连接池的方式</span></span><br><span class="line"></span><br><span class="line">r = redis.Redis(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">6379</span>, decode_responses=<span class="literal">True</span>)</span><br><span class="line">r.set(<span class="string">'skey'</span>, <span class="string">'svalue'</span>)</span><br><span class="line">print(r[<span class="string">'skey'</span>])</span><br><span class="line">print(r.get(<span class="string">'skey'</span>))</span><br><span class="line">print(type(r.get(<span class="string">'skey'</span>)))</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="comment"># 抽取封装成模块，全局使用（单例模式，redis_pool.py）</span></span><br><span class="line">POOL = redis.ConnectionPool(host=<span class="string">'xx.xx.xx.xx'</span>, port=<span class="number">6379</span>, password=<span class="string">'xxx'</span>, max_connections=<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引用全局连接池</span></span><br><span class="line"><span class="keyword">from</span> redis_pool <span class="keyword">import</span> POOL</span><br><span class="line"></span><br><span class="line">conn = redis.Redis(connection_pool=POOL)</span><br><span class="line">conn.set(key, value)</span><br></pre></td></tr></table></figure><ul><li>方式二，依赖于<code>pip3 install django-redis</code>，适用于django框架</li></ul><p><code>settings.py</code>中配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">"default"</span>: &#123;</span><br><span class="line">        <span class="string">"BACKEND"</span>: <span class="string">"django_redis.cache.RedisCache"</span>,</span><br><span class="line">        <span class="string">"LOCATION"</span>: <span class="string">"redis://127.0.0.1:6379"</span>,</span><br><span class="line">        <span class="string">"OPTIONS"</span>: &#123;</span><br><span class="line">            <span class="string">"CLIENT_CLASS"</span>: <span class="string">"django_redis.client.DefaultClient"</span>,</span><br><span class="line">            <span class="string">"CONNECTION_POOL_KWARGS"</span>: &#123;<span class="string">"max_connections"</span>: <span class="number">100</span>&#125;,</span><br><span class="line">            <span class="string">"DECODE_RESPONSES"</span>:<span class="literal">True</span>, <span class="comment"># 写入为字符串类型</span></span><br><span class="line">            <span class="string">"PASSWORD"</span>: <span class="string">"密码"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 视图中使用</span></span><br><span class="line"><span class="keyword">from</span> django_redis <span class="keyword">import</span> get_redis_connection</span><br><span class="line">conn = get_redis_connection(<span class="string">"default"</span>) <span class="comment"># 这里的default是settings.py中的CACHES里的default</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.cache <span class="keyword">import</span> cache</span><br><span class="line">cache.set(key, value)</span><br><span class="line"><span class="comment"># 另一种方式，可能有坑</span></span><br></pre></td></tr></table></figure><p>原文链接：<a href="https://juejin.im/post/5d0b4488e51d45108126d257" target="_blank" rel="noopener">https://juejin.im/post/5d0b4488e51d45108126d257</a></p><h1 id="django中使用redis作为缓存"><a href="#django中使用redis作为缓存" class="headerlink" title="django中使用redis作为缓存"></a>django中使用redis作为缓存</h1><p>需要完成上面的<code>settings.py</code>的配置后:</p><ul><li>全站缓存，在<code>settings.py</code>中配置中间件，将下方写入第一条和最后一条。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'django.middleware.cache.UpdateCacheMiddleware'</span>,</span><br><span class="line"><span class="comment"># 其他中间件...</span></span><br><span class="line"><span class="string">'django.middleware.cache.FetchFromCacheMiddleware'</span>,</span><br></pre></td></tr></table></figure><ul><li>指定页面缓存</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.cache <span class="keyword">import</span> cache_page</span><br><span class="line"><span class="comment"># 方法I</span></span><br><span class="line"><span class="meta">@cache_page(60 * 15)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_view</span><span class="params">(request)</span>:</span></span><br><span class="line">   ...</span><br><span class="line"><span class="comment"># 方法II</span></span><br><span class="line">urlpatterns = [url(<span class="string">r'^foo/([0-9]&#123;1,2&#125;)/$'</span>, cache_page(<span class="number">60</span> * <span class="number">15</span>)(my_view)),]</span><br></pre></td></tr></table></figure><ul><li>指定模板部分缓存</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">步骤I. 引入TemplateTag</span><br><span class="line">        &#123;% load cache %&#125;</span><br><span class="line">步骤II. 使用缓存</span><br><span class="line">        &#123;% cache 5000 缓存key %&#125;</span><br><span class="line">            缓存内容</span><br><span class="line">        &#123;% endcache %&#125;</span><br></pre></td></tr></table></figure><p>原文链接：<a href="https://www.jianshu.com/p/d017441f4fc9" target="_blank" rel="noopener">https://www.jianshu.com/p/d017441f4fc9</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用django发送邮件&quot;&gt;&lt;a href=&quot;#使用django发送邮件&quot; class=&quot;headerlink&quot; title=&quot;使用django发送邮件&quot;&gt;&lt;/a&gt;使用django发送邮件&lt;/h1&gt;&lt;p&gt;在&lt;code&gt;settings.py&lt;/code&gt;中加入以下
      
    
    </summary>
    
    
    
      <category term="django" scheme="https://yaoyue47.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>学习django第三天</title>
    <link href="https://yaoyue47.github.io/2020/04/17/%E5%AD%A6%E4%B9%A0django%E7%AC%AC%E4%B8%89%E5%A4%A9/"/>
    <id>https://yaoyue47.github.io/2020/04/17/%E5%AD%A6%E4%B9%A0django%E7%AC%AC%E4%B8%89%E5%A4%A9/</id>
    <published>2020-04-17T15:38:36.000Z</published>
    <updated>2020-06-22T14:28:52.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="uwsgi和nginx的联系"><a href="#uwsgi和nginx的联系" class="headerlink" title="uwsgi和nginx的联系"></a>uwsgi和nginx的联系</h1><h3 id="web服务器和web框架："><a href="#web服务器和web框架：" class="headerlink" title="web服务器和web框架："></a>web服务器和web框架：</h3><p><strong>web服务器</strong>即用来接受客户端请求，建立连接，转发响应的程序。至于转发的内容是什么，交由<strong>web框架</strong>来处理，即处理这些业务逻辑。如查询数据库、生成实时信息等。Nginx就是一个web服务器，<code>Django</code>或<code>flask</code>就是<strong>web框架</strong>。</p><h3 id="uWSGI和WSGI："><a href="#uWSGI和WSGI：" class="headerlink" title="uWSGI和WSGI："></a>uWSGI和WSGI：</h3><p>只要web服务器和web框架满足WSGI协议，它们就能相互搭配。所以WSGI只是一个协议，一个约定。</p><p><code>uWSGI</code>，则是实现了<strong>WSGI协议</strong>的一个<strong>web服务器</strong>。即用来接受客户端请求，转发响应的程序。实际上，一个<code>uWSGI</code>的web服务器，再加上<code>Django</code>这样的web框架，就已经可以实现网站的功能了。那为什么还需要Nginx呢？</p><h3 id="为什么需要Nginx"><a href="#为什么需要Nginx" class="headerlink" title="为什么需要Nginx:"></a>为什么需要Nginx:</h3><p>一个普通的个人网站，访问量不大的话，当然可以由<code>uWSGI</code>和<code>Django</code>构成。但是一旦访问量过大，客户端请求连接就要进行长时间的等待。这个时候就出来了分布式服务器，我们可以多来几台web服务器，都能处理请求。但是谁来分配客户端的请求连接和web服务器呢？Nginx就是这样一个管家的存在，由它来分配。这也就是由<strong>Nginx实现反向代理</strong>，即代理服务器。</p><p>同时Nginx也可以实现静态文件的直接发送，这样请求静态文件不用经过框架。</p><p><img src="/img/%E5%AD%A6%E4%B9%A0django%E7%AC%AC%E4%B8%89%E5%A4%A9.png" alt="学习django第三天"></p><p><img src="/img/%E5%AD%A6%E4%B9%A0djo%E7%AC%AC%E4%B8%89%E5%A4%A9.jpg" alt="学习djo第三天"></p><p>原文链接：<a href="https://blog.csdn.net/CHENYAoo/article/details/83055108" target="_blank" rel="noopener">https://blog.csdn.net/CHENYAoo/article/details/83055108</a></p><h1 id="如何完整的删掉一个项目的app？"><a href="#如何完整的删掉一个项目的app？" class="headerlink" title="如何完整的删掉一个项目的app？"></a>如何完整的删掉一个项目的app？</h1><h3 id="1-删除models-py"><a href="#1-删除models-py" class="headerlink" title="1.删除models.py"></a>1.删除models.py</h3><p>无论是删除一个单独的model还是删除整个App,都需要首先删除<code>models.py</code>文件中的模型。</p><ul><li>确认没有其他文件引用<code>models.py</code>中的类。</li><li>迁移或者删除你的数据库，Django提供了简便的方法方便用户删除某App下的所有数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">manage.py migrate your_app_name zero</span><br></pre></td></tr></table></figure><ul><li>删除<code>models.py</code>中的数据模型。</li></ul><h3 id="2-删除App"><a href="#2-删除App" class="headerlink" title="2.删除App"></a>2.删除App</h3><ul><li>再次确认其他App中没有引用此App的文件</li><li>删除整个App文件夹</li><li>在<code>settings.py</code>的<code>Installed Apps</code>中移除该app。</li><li>在<code>urls.py</code>中移除该App相关内容。</li></ul><p>原文链接：<a href="https://blog.csdn.net/huochen1994/article/details/52680067" target="_blank" rel="noopener">https://blog.csdn.net/huochen1994/article/details/52680067</a></p><h1 id="django-关于manage-py-migrate无效的问题"><a href="#django-关于manage-py-migrate无效的问题" class="headerlink" title="django-关于manage.py migrate无效的问题"></a>django-关于manage.py migrate无效的问题</h1><h3 id="1-原因"><a href="#1-原因" class="headerlink" title="1.原因"></a>1.原因</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br></pre></td></tr></table></figure><p>这条语句是将modle.py中的代码生成新的迁移文件<code>polls/migrations/0001_initial.py</code>  ,该文件记录当前modle.py和最新的迁移文件之间的变化量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p>将迁移文件的内容映射成实际数据库的结构，同时在<code>django_migrations</code>表中创建相应的记录。</p><p>如果迁移文件中的自增ID已经出现在数据库的<code>django_migrations</code>表中，在Django看来，被记录了就相当于已应用，所以，会出现刚开始的<code>No migrations to apply.</code></p><h3 id="2-预防措施"><a href="#2-预防措施" class="headerlink" title="2.预防措施"></a>2.预防措施</h3><p>删除migrations文件的同时到数据库<code>django_migrations</code>表中删除相应记录。</p><p>原文链接：<a href="https://blog.csdn.net/qq_25730711/article/details/60327344" target="_blank" rel="noopener">https://blog.csdn.net/qq_25730711/article/details/60327344</a></p><h1 id="细数部署djanog中遇到的坑"><a href="#细数部署djanog中遇到的坑" class="headerlink" title="细数部署djanog中遇到的坑"></a>细数部署djanog中遇到的坑</h1><p>今日被迫花掉一天时间来部署django项目，处处遇到坑，差点被劝退，唉。详细记录之</p><h3 id="django中的坑："><a href="#django中的坑：" class="headerlink" title="django中的坑："></a>django中的坑：</h3><p>django中<code>setting</code>中设置选项有个<code>DEBUG</code> ,默认开启，就是平时的开发模式，关闭之后有2个改变：</p><ul><li>报错的话不会输出报错信息</li><li>django不再处理静态文件，也就是说如果不布置nginx的话就无法使用静态文件</li></ul><p>设置中有3个配置与之有关，</p><ul><li>STATIC_URL = ‘/static/‘ 为每一个app指定其中的静态文件的位置，必须填，填写后模板文件可以这么写</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">load</span></span> static %&#125;</span></span><br><span class="line"><span class="xml">href="</span><span class="template-tag">&#123;% <span class="name"><span class="name">static</span></span> 'polls/style.css' %&#125;</span><span class="xml">"</span></span><br></pre></td></tr></table></figure><ul><li>STATICFILES_DIRS= [    os.path.join(BASE_DIR, ‘static’) ]  配置公共的静态文件的地方，配置后会在整个 <code>Project</code> 的根目录生成公共静态文件夹</li><li>STATIC_ROOT = ‘/root/static_root/‘ 在指定路径（根目录）下生成文件夹，再执行这个命令</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py collectstatic</span><br></pre></td></tr></table></figure><p>django会将所有的静态文件收集到这个文件夹，方便nginx的配置使用</p><p>原文链接：<a href="https://juejin.im/entry/5ac439af5188255cb07d52f0" target="_blank" rel="noopener">https://juejin.im/entry/5ac439af5188255cb07d52f0</a></p><h3 id="uwsgi中的坑"><a href="#uwsgi中的坑" class="headerlink" title="uwsgi中的坑"></a>uwsgi中的坑</h3><p>安装：(无坑)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install uwsgi</span><br></pre></td></tr></table></figure><p>在任意位置（/root）下新建一个<code>myconf.ini</code> 文件，写入如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[uwsgi]</span></span><br><span class="line"><span class="attr">socket</span> = <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">3031</span> <span class="comment"># 套接字的端口，无法直接访问， 如果写成http = :80 的话才能直接访问</span></span><br><span class="line"><span class="attr">chdir</span> = /root/djo/ <span class="comment">#指向django工程目录</span></span><br><span class="line"><span class="attr">wsgi-file</span> = djo/wsgi.py <span class="comment">#指向django中的wsgi.py文件</span></span><br><span class="line"><span class="attr">processes</span> = <span class="number">4</span></span><br><span class="line"><span class="attr">threads</span> = <span class="number">2</span></span><br><span class="line"><span class="attr">master</span> = <span class="literal">true</span> </span><br><span class="line"><span class="attr">stats</span>=/root/uwsgi.status           将状态信息记录在这里 需要手动创建</span><br><span class="line"><span class="attr">pidfile</span>=/root/uwsgi.pid将pid(进程号)记录在这里，方便以后关闭和重启uwsgi进程 需要手动创建</span><br></pre></td></tr></table></figure><p>使用命令：</p><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --ini myconf.ini # 以myconf.ini的配置启动uwsgi</span><br></pre></td></tr></table></figure><p>重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --reload uwsgi.pid #寻找uwsgi.pid文件,按文件中的值重启对应进程</span><br></pre></td></tr></table></figure><p>关闭</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --stop uwsgi.pid</span><br></pre></td></tr></table></figure><h3 id="nginx中的坑"><a href="#nginx中的坑" class="headerlink" title="nginx中的坑"></a>nginx中的坑</h3><p>安装：(无坑)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></figure><p>配置：</p><p>在<code>/etc/nginx/nginx.conf</code> 这里修改nginx的配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">user root; # 修改user信息，不改的话会报错403</span><br><span class="line">location &#x2F; &#123;</span><br><span class="line">            include uwsgi_params;     # 导入uwsgi_params</span><br><span class="line">            uwsgi_pass 127.0.0.1:3031; # 这里是uwsgi里配置的socket的端口</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location &#x2F;static &#123;</span><br><span class="line">            alias &#x2F;root&#x2F;static_root; # 填入django中设置的收集文件夹的目录</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx.service</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>更新django项目的步骤为：</p><ul><li>将<code>DEBUG</code> 改为False。</li><li>将<code>ALLOWED_HOSTS = [ ]</code> 中加入要部署的域名</li><li><code>python manage.py collectstatic</code> 收集静态</li><li><code>uwsgi --reload uwsgi.pid</code> 重启uwsgi</li></ul><h1 id="关于django中设置cookie不可为中文的坑"><a href="#关于django中设置cookie不可为中文的坑" class="headerlink" title="关于django中设置cookie不可为中文的坑"></a>关于django中设置cookie不可为中文的坑</h1><p>最近一直被这个bug所困扰，经过反复测试为设置cookie时中文编码问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UnicodeEncodeError: &#39;latin-1&#39; codec can&#39;t encode character &#39;\u6211&#39; in position 157: ordinal not in range(256)</span><br></pre></td></tr></table></figure><p>解决方案：使用<code>json.dumps()，json.loads()</code>方式将cookie转换为<code>Unicode</code>格式</p><p>原文链接：<a href="https://blog.csdn.net/qq_38707580/article/details/79478461" target="_blank" rel="noopener">https://blog.csdn.net/qq_38707580/article/details/79478461</a></p><p>同时附上计算机关于编码的相关知识：</p><p>ASCII码，GBK等码是各国为了各自的国家设计的编码方式，后来有了统一的编码方式：UNICODE。</p><p>UNICODE只是规定了每个字符对应的编码，但是没有规定编码如何储存，所以有了utf-8,utf-16等，他们是UNICODE的实现方式。</p><p><img src="/img/%E5%AD%A6%E4%B9%A0django%E7%AC%AC%E4%B8%89%E5%A4%A91.png" alt="学习django第三天1"></p><p>原文链接：<a href="https://www.cnblogs.com/chaojiyingxiong/p/9822444.html" target="_blank" rel="noopener">https://www.cnblogs.com/chaojiyingxiong/p/9822444.html</a></p><h1 id="去掉views-py中可恶的if-request-method-‘GET’-！"><a href="#去掉views-py中可恶的if-request-method-‘GET’-！" class="headerlink" title="去掉views.py中可恶的if request.method == ‘GET’: ！"></a>去掉views.py中可恶的if request.method == ‘GET’: ！</h1><p>我们在编写<code>views.py</code>视图函数中总是会不可避免要写如下函数（如果采用REST风格的api的话）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aa</span><span class="params">(request)</span>:</span></span><br><span class="line"><span class="keyword">if</span> request.method == <span class="string">'GET'</span>: </span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'DELETE'</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>十分丑陋，那么可以使用类视图来替换函数视图来解决这个问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">http_method_not_allowed</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'你请求的姿势不正确'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用方法</span></span><br><span class="line">url(url, ClassName.as_view(), name)</span><br></pre></td></tr></table></figure><p>as_view()会自动根据请求的方式来进入类视图中对应的方式。</p><p>原文链接：<a href="https://blog.csdn.net/xujin0/article/details/103145396" target="_blank" rel="noopener">https://blog.csdn.net/xujin0/article/details/103145396</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;uwsgi和nginx的联系&quot;&gt;&lt;a href=&quot;#uwsgi和nginx的联系&quot; class=&quot;headerlink&quot; title=&quot;uwsgi和nginx的联系&quot;&gt;&lt;/a&gt;uwsgi和nginx的联系&lt;/h1&gt;&lt;h3 id=&quot;web服务器和web框架：&quot;&gt;&lt;a
      
    
    </summary>
    
    
    
      <category term="django" scheme="https://yaoyue47.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>git全攻略</title>
    <link href="https://yaoyue47.github.io/2020/04/11/git%E5%85%A8%E6%94%BB%E7%95%A5/"/>
    <id>https://yaoyue47.github.io/2020/04/11/git%E5%85%A8%E6%94%BB%E7%95%A5/</id>
    <published>2020-04-11T11:33:52.000Z</published>
    <updated>2020-08-25T14:59:18.660Z</updated>
    
    <content type="html"><![CDATA[<h1 id="本地git全攻略"><a href="#本地git全攻略" class="headerlink" title="本地git全攻略"></a>本地git全攻略</h1><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><ul><li>当已经有文件的时候：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd folder</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><ul><li>没有文件时：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd folder_name</span><br><span class="line">git init projects_name</span><br></pre></td></tr></table></figure><p>出现 <code>.git</code> 文件夹即表示完成创建</p><blockquote><p>查询当前的git用户配置信息用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git config --global --list</span><br></pre></td></tr></table></figure></blockquote><h3 id="git提交版本"><a href="#git提交版本" class="headerlink" title="git提交版本"></a>git提交版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add file_name </span><br><span class="line">git add .   #提交到缓存空间</span><br><span class="line">git commit -m &#39;版本信息&#39; #正式提交版本</span><br></pre></td></tr></table></figure><blockquote><p>使用<code>.gitignore</code>文件来说明哪些文件不被版本控制</p></blockquote><h3 id="版本状态查看"><a href="#版本状态查看" class="headerlink" title="版本状态查看"></a>版本状态查看</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">git status -s #简短形式展示</span><br></pre></td></tr></table></figure><p><strong>文件名显示红色表示未存至缓存空间</strong></p><p><strong>文件名显示绿色表示未正式提交</strong></p><h3 id="查看历史版本"><a href="#查看历史版本" class="headerlink" title="查看历史版本"></a>查看历史版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br><span class="line">git log --pretty&#x3D;oneline #单行显示</span><br><span class="line">git log -p #显示版本之间的差别</span><br><span class="line"></span><br><span class="line">git log --graph # 查看分支合并图</span><br><span class="line">git log --graph --pretty&#x3D;oneline --abbrev-commit # 简略版查看分支合并图</span><br></pre></td></tr></table></figure><h3 id="版本对比"><a href="#版本对比" class="headerlink" title="版本对比"></a>版本对比</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git diff #查看工作区代码和最新版本的不同</span><br><span class="line">git diff --staged #查看暂存区和最新版本有什么不同</span><br><span class="line">git diff 老版本号 新版本号 # 查看老新之间区别</span><br></pre></td></tr></table></figure><h3 id="工作区回滚"><a href="#工作区回滚" class="headerlink" title="工作区回滚"></a>工作区回滚</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git restore file_name #将工作区的修改抹掉，与暂存区同步</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git restore --staged file_name #撤回add命令</span><br></pre></td></tr></table></figure><h3 id="版本回滚"><a href="#版本回滚" class="headerlink" title="版本回滚"></a>版本回滚</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout 版本号&#x2F;标签名 # 这个命令是将head指针从该分支上转移到指定版本号上，head处于游离状态，操作无效。可以通过此命令完整查看历史版本</span><br><span class="line">git reset --hard 版本号 #将所有的暂存区工作区内容恢复成指定版本</span><br></pre></td></tr></table></figure><h3 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag tag_name #将当前的最新版本打标签</span><br><span class="line">git tag # 查看所有的tag</span><br></pre></td></tr></table></figure><p>tag标签，常用于v1.0.1之类的版本号</p><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git branch # 列出所有分支</span><br><span class="line"></span><br><span class="line">git branch branch_name #创建分支</span><br><span class="line"></span><br><span class="line">git checkout branch_name #切换分支</span><br><span class="line">git switch branch_name #新版本的切换分支</span><br><span class="line"></span><br><span class="line">git merge branch_name #合并这个branch_name分支到当前的分支</span><br></pre></td></tr></table></figure><h1 id="github远程仓库全攻略"><a href="#github远程仓库全攻略" class="headerlink" title="github远程仓库全攻略"></a>github远程仓库全攻略</h1><h3 id="查看远程配置"><a href="#查看远程配置" class="headerlink" title="查看远程配置"></a>查看远程配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br><span class="line">git remote 远程地址名 远程地址 #添加远程地址</span><br></pre></td></tr></table></figure><h3 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push 远程地址名 master #推送至远程仓库</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch 远程地址名 #将远程地址下载到本地后，不合并</span><br><span class="line">git pull 远程地址名 master #将远程仓库下载到本地，然后直接合并</span><br><span class="line">git pull&#x3D;git fetch + git merge</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone url #克隆别人的项目</span><br></pre></td></tr></table></figure><hr><p>完</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;本地git全攻略&quot;&gt;&lt;a href=&quot;#本地git全攻略&quot; class=&quot;headerlink&quot; title=&quot;本地git全攻略&quot;&gt;&lt;/a&gt;本地git全攻略&lt;/h1&gt;&lt;h3 id=&quot;创建仓库&quot;&gt;&lt;a href=&quot;#创建仓库&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
    
      <category term="git" scheme="https://yaoyue47.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>学习django第二天</title>
    <link href="https://yaoyue47.github.io/2020/04/11/%E5%AD%A6%E4%B9%A0django%E7%AC%AC%E4%BA%8C%E5%A4%A9/"/>
    <id>https://yaoyue47.github.io/2020/04/11/%E5%AD%A6%E4%B9%A0django%E7%AC%AC%E4%BA%8C%E5%A4%A9/</id>
    <published>2020-04-11T03:35:06.000Z</published>
    <updated>2020-05-03T12:16:03.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于HttpResponse"><a href="#关于HttpResponse" class="headerlink" title="关于HttpResponse"></a>关于HttpResponse</h1><p>HttpResponse是一个对象。</p><p>可以在返回的时候申明返回的类型<code>content_type</code>，也可以选择默认</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> HttpResponse(my_data, content_type=<span class="string">'application/json'</span>, status=<span class="number">200</span>)</span><br></pre></td></tr></table></figure><p>拥有以下特性：</p><p><strong>属性：</strong></p><p>HttpResponse.status_code</p><p>响应的状态码，比如200。</p><p><strong>子类：</strong></p><ul><li>class HttpResponseRedirect[source]：重定向，返回302状态码。已经被redirect()替代。？</li><li>class HttpResponseBadRequest[source]：错误的请求，返回400状态码。</li><li>class HttpResponseNotFound[source]：页面不存在，返回404状态码。</li><li>class HttpResponseForbidden[source]：禁止访问，返回403状态码。</li><li>class HttpResponseNotAllowed[source]：禁止访问，返回405状态码。</li><li>class HttpResponseServerError[source]：服务器错误，返回500状态码。</li></ul><h1 id="关于-HttpRequest"><a href="#关于-HttpRequest" class="headerlink" title="关于 HttpRequest"></a>关于 HttpRequest</h1><p>HttpRequest是一个对象，拥有以下特性：</p><p><strong>属性：</strong></p><p>HttpRequest.scheme</p><p>字符串类型，表示请求的协议种类，’http’或’https’。</p><p>HttpRequest.path</p><p>字符串类型，表示当前请求页面的完整路径，但是不包括协议名和域名。例如：”/music/bands/the_beatles/“。</p><p>HttpRequest.method</p><p>字符串类型，请求的方式，有”POST”和”GET”</p><p>HttpRequest.COOKIES</p><p>包含所有Cookie信息的字典。</p><h1 id="关于QueryDict对象"><a href="#关于QueryDict对象" class="headerlink" title="关于QueryDict对象"></a>关于QueryDict对象</h1><p>HttpRequest的GET，POST都是QueryDict对象</p><blockquote><p>QueryDict对象和字典的区别 ：</p><p>QueryDict对象可以一个值对应多个值，比如 a=3&amp;a=4&amp;b=5</p><p>字典只能一个值对应一个值 ，比如 {“a”=[1,2,3]}</p></blockquote><p><strong>方法:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.GET.get(<span class="string">'键'</span>,default)</span><br><span class="line">request.GET[<span class="string">'键'</span>] <span class="comment">#简写   #POST同理 #区别是简写的话如果没有值会直接报错，而非简写会设为默认值None</span></span><br></pre></td></tr></table></figure><p>如果一个键同时拥有多个值，获取最后一个值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.GET.getlist(<span class="string">'键'</span>,default) <span class="comment">#POST同理</span></span><br></pre></td></tr></table></figure><p>将键的值以列表返回，可以获取一个键的多个值</p><p>当然，可以通过这样遍历GET或者POST所有的键：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> request.GET:</span><br><span class="line">print(key)</span><br></pre></td></tr></table></figure><p>获取json请求的数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json.loads(request.body).get(<span class="string">'user'</span>) <span class="comment">#这种方法适用于无法直接用POST.get()方法获取数据时适用，注意ajax请求时数据需要用JSON.stringify()处理成字符串</span></span><br></pre></td></tr></table></figure><p><img src="/img/%E5%AD%A6%E4%B9%A0django%E7%AC%AC%E4%BA%8C%E5%A4%A9_1.jpg" alt="学习django第二天_1"></p><h1 id="关于-cookie和session"><a href="#关于-cookie和session" class="headerlink" title="关于 cookie和session"></a>关于 cookie和session</h1><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p>通过浏览器在用户的本地存储的一段明文信息，使用键值方式进行存储。<br>使用场景：用户名，浏览记录，主题设置等一些不重要的信息</p><p>运行机制：</p><p><img src="/img/%E5%AD%A6%E4%B9%A0django%E7%9A%84%E7%AC%AC%E4%BA%8C%E5%A4%A9.png" alt="学习django的第二天"></p><p>设置cookie：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_cookie</span><span class="params">(request)</span>:</span></span><br><span class="line">    response = HttpResponse(<span class="string">"aaaa"</span>)</span><br><span class="line">    response.set_cookie(<span class="string">'number'</span>, <span class="string">'1254'</span>,max_age=<span class="literal">None</span>) <span class="comment">#max_age 默认None，浏览器关闭后删除，以秒为单位 max_age=60*60*24 一天</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>访问cookie：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.COOKIES[<span class="string">'number'</span>] <span class="comment">#注意是request</span></span><br></pre></td></tr></table></figure><h3 id="session会话"><a href="#session会话" class="headerlink" title="session会话"></a>session会话</h3><p>本质是存储在服务器的cookie，安全性更高。</p><p>使用场景：账户密码，钱包余额，在不同页面保持登录等</p><p>session依赖于cookie的使用，因为session是通过cookie中的cookieid这个哈希值来区分每一个用户的。</p><p>session可以选择在一下方式存储：</p><ul><li>保存在数据库内 （一般为默认方式，迁移后会在数据库中创建django_session表，有三个字段：键，值，过期时间）</li><li>保存到缓存</li><li>保存到文件内</li><li>保存到cookie内</li></ul><p>设置session：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.session[<span class="string">'key'</span>] = <span class="string">'hello123'</span></span><br></pre></td></tr></table></figure><p>获取session：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.session.get(<span class="string">'key'</span>,<span class="string">'默认值'</span>) <span class="comment">#默认值为如果在session中没有这个值，则返回默认值</span></span><br></pre></td></tr></table></figure><p>删除session：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request.session.clear() <span class="comment">#在存储中删去所有session的值</span></span><br><span class="line">request.session.flush() <span class="comment">#在存储中删去所有session</span></span><br><span class="line"><span class="keyword">del</span> request.session[<span class="string">'键'</span>] <span class="comment">#删除这个键和其对应的值</span></span><br></pre></td></tr></table></figure><p>设置会话过期时间：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">request.session.set_expiry(value)</span><br><span class="line"><span class="comment"># 默认2个星期过期</span></span><br><span class="line"><span class="comment"># value为int ，则代表秒</span></span><br><span class="line"><span class="comment"># value为None，则永不过期</span></span><br><span class="line"><span class="comment"># value为0，在用户浏览器关闭时过期</span></span><br></pre></td></tr></table></figure><h1 id="关于序列化-查询集转json"><a href="#关于序列化-查询集转json" class="headerlink" title="关于序列化(查询集转json)"></a>关于序列化(查询集转json)</h1><p><strong>将查询集转换成json有三种方法：</strong></p><p><strong>方法一，直接序列化</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core <span class="keyword">import</span> serializers</span><br><span class="line">data = serializers.serialize(<span class="string">"json"</span>, SomeModel.objects.all())</span><br><span class="line">data = serializers.serialize(<span class="string">'xml'</span>, SomeModel.objects.all(), fields=(<span class="string">'name'</span>,<span class="string">'size'</span>)) <span class="comment">#有选择的序列化</span></span><br></pre></td></tr></table></figure><p>序列化主要是将模型model中的查询结果（QuerySet对象）转化成符合”json”,”xml”,”yaml”等格式的字符串</p><p>实践后发现序列化后格式是这样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"pk"</span>: <span class="string">"4b678b301dfd8a4e0dad910de3ae245b"</span>,</span><br><span class="line">        <span class="string">"model"</span>: <span class="string">"sessions.session"</span>,</span><br><span class="line">        <span class="string">"fields"</span>: &#123;</span><br><span class="line">            <span class="string">"expire_date"</span>: <span class="string">"2013-01-16T08:16:59.844Z"</span>,</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>方法二，采用values+list方法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">book = Book.objects.all().values()</span><br><span class="line">data[<span class="string">'list'</span>] = list(book)</span><br><span class="line"><span class="keyword">return</span> JsonResponse(data)</span><br></pre></td></tr></table></figure><p>values()返回查询出来的字典集，list()将其转换成列表</p><p>data的形式为这样，更为优雅</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"list"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"id"</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="string">"book_name"</span>: <span class="string">"test"</span>,</span><br><span class="line">      <span class="string">"add_time"</span>: <span class="string">"2017-09-15T00:48:45.123Z"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"id"</span>: <span class="number">14</span>,</span><br><span class="line">      <span class="string">"book_name"</span>: <span class="string">"可以吗"</span>,</span><br><span class="line">      <span class="string">"add_time"</span>: <span class="string">"2017-09-16T03:47:02.662Z"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法三，for循环拼装</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">list.append(i.datetime)</span><br></pre></td></tr></table></figure><h1 id="关于ajax请求时csrf问题"><a href="#关于ajax请求时csrf问题" class="headerlink" title="关于ajax请求时csrf问题"></a>关于ajax请求时csrf问题</h1><p>在views.py中设置不验证csrf：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_view</span><span class="params">(request)</span>:</span></span><br></pre></td></tr></table></figure><p>在视图函数前添加修饰器即可。</p><p>在前端form中设置csrf：</p><p>将<code>{ csrf_token }</code>加入form表单任意位置 #伪</p><p>ajax在使用jQuery封装时验证csrf：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$.ajaxSetup(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    csrfmiddlewaretoken: <span class="string">'&#123;&#123; csrf_token &#125;&#125;'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>ajax在使用原生请求时验证csrf：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">jQuery(<span class="built_in">document</span>).ajaxSend(<span class="function"><span class="keyword">function</span>(<span class="params">event, xhr, settings</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> cookieValue = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">document</span>.cookie &amp;&amp; <span class="built_in">document</span>.cookie != <span class="string">''</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> cookies = <span class="built_in">document</span>.cookie.split(<span class="string">';'</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cookies.length; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> cookie = jQuery.trim(cookies[i]);</span><br><span class="line">                <span class="comment">// Does this cookie string begin with the name we want?</span></span><br><span class="line">                <span class="keyword">if</span> (cookie.substring(<span class="number">0</span>, name.length + <span class="number">1</span>) == (name + <span class="string">'='</span>)) &#123;</span><br><span class="line">                    cookieValue = <span class="built_in">decodeURIComponent</span>(cookie.substring(name.length + <span class="number">1</span>));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cookieValue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sameOrigin</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// url could be relative or scheme relative or absolute</span></span><br><span class="line">        <span class="keyword">var</span> host = <span class="built_in">document</span>.location.host; <span class="comment">// host + port</span></span><br><span class="line">        <span class="keyword">var</span> protocol = <span class="built_in">document</span>.location.protocol;</span><br><span class="line">        <span class="keyword">var</span> sr_origin = <span class="string">'//'</span> + host;</span><br><span class="line">        <span class="keyword">var</span> origin = protocol + sr_origin;</span><br><span class="line">        <span class="comment">// Allow absolute or scheme relative URLs to same origin</span></span><br><span class="line">        <span class="keyword">return</span> (url == origin || url.slice(<span class="number">0</span>, origin.length + <span class="number">1</span>) == origin + <span class="string">'/'</span>) ||</span><br><span class="line">            (url == sr_origin || url.slice(<span class="number">0</span>, sr_origin.length + <span class="number">1</span>) == sr_origin + <span class="string">'/'</span>) ||</span><br><span class="line">            <span class="comment">// or any other URL that isn't scheme relative or absolute i.e relative.</span></span><br><span class="line">            !(<span class="regexp">/^(\/\/|http:|https:).*/</span>.test(url));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">safeMethod</span>(<span class="params">method</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="regexp">/^(GET|HEAD|OPTIONS|TRACE)$/</span>.test(method));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!safeMethod(settings.type) &amp;&amp; sameOrigin(settings.url)) &#123;</span><br><span class="line">        xhr.setRequestHeader(<span class="string">"X-CSRFToken"</span>, getCookie(<span class="string">'csrftoken'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;关于HttpResponse&quot;&gt;&lt;a href=&quot;#关于HttpResponse&quot; class=&quot;headerlink&quot; title=&quot;关于HttpResponse&quot;&gt;&lt;/a&gt;关于HttpResponse&lt;/h1&gt;&lt;p&gt;HttpResponse是一个对象。&lt;/p&gt;
      
    
    </summary>
    
    
    
      <category term="django" scheme="https://yaoyue47.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>学习django第一天</title>
    <link href="https://yaoyue47.github.io/2020/04/07/%E5%AD%A6%E4%B9%A0django%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
    <id>https://yaoyue47.github.io/2020/04/07/%E5%AD%A6%E4%B9%A0django%E7%AC%AC%E4%B8%80%E5%A4%A9/</id>
    <published>2020-04-07T13:53:40.000Z</published>
    <updated>2020-05-07T11:07:19.663Z</updated>
    
    <content type="html"><![CDATA[<h2 id="django框架设计模式"><a href="#django框架设计模式" class="headerlink" title="django框架设计模式"></a>django框架设计模式</h2><h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><p><strong>模型(Model)：</strong></p><p>Web框架和数据库的交互层。</p><p><strong>视图(View)：</strong></p><p>负责数据的显示和呈现，是对用户的直接输出。</p><p><strong>控制器(Controller)：</strong></p><p>负责从用户端收集用户的输入，可以看成提供View的反向功能。</p><h3 id="MTV（即django所用设计模式）"><a href="#MTV（即django所用设计模式）" class="headerlink" title="MTV（即django所用设计模式）"></a>MTV（即django所用设计模式）</h3><p><strong>模型(Model)：</strong></p><p>通过orm的方式,即一个python中的类来表示数据库中的一个表。本意为设计数据库的结构。</p><p><strong>模板(Template)</strong>：</p><p>本质为html文件填入了模板语言。</p><p><strong>视图(View)：</strong></p><p>主要逻辑所在的地方，纯python代码，来控制模板可以获得什么数据。</p><h3 id="django的模型组织参考："><a href="#django的模型组织参考：" class="headerlink" title="django的模型组织参考："></a>django的模型组织参考：</h3><p><img src="/img/%E5%AD%A6%E4%B9%A0django%E7%AC%AC%E4%B8%80%E5%A4%A9.png" alt="84-3"></p><h2 id="django常用命令："><a href="#django常用命令：" class="headerlink" title="django常用命令："></a>django常用命令：</h2><p>创建项目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject mysite</span><br></pre></td></tr></table></figure><p>启动项目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver <span class="comment">#默认8000端口</span></span><br></pre></td></tr></table></figure><p>创建app：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp polls</span><br></pre></td></tr></table></figure><p>创建迁移文件 <code>polls/migrations/0001_initial.py</code> 方便git记录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br></pre></td></tr></table></figure><p> 将model.py的代码转换成实际数据库结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><h2 id="django-路径文件说明："><a href="#django-路径文件说明：" class="headerlink" title="django 路径文件说明："></a>django 路径文件说明：</h2><h3 id="urls-py文件备注"><a href="#urls-py文件备注" class="headerlink" title="urls.py文件备注"></a>urls.py文件备注</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'polls/'</span>, include(<span class="string">'polls.urls'</span>)),<span class="comment"># 分给二级路由</span></span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),<span class="comment">#匹配admin后台管理的路由</span></span><br><span class="line">]</span><br><span class="line"><span class="comment"># 下面为二级路由 #</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># ex: /polls/</span></span><br><span class="line">    path(<span class="string">''</span>, views.index, name=<span class="string">'index'</span>),</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># ex: /polls/5/</span></span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/'</span>, views.detail, name=<span class="string">'detail'</span>),</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># ex: /polls/5/results/</span></span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/results/'</span>, views.results, name=<span class="string">'results'</span>),</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># ex: /polls/5/vote/</span></span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/vote/'</span>, views.vote, name=<span class="string">'vote'</span>),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>urlpatterns内为各路路由</p><p>path函数内有四个值：匹配的路径表达式，调用的views的函数，路径的名称（可省略）</p><ul><li><strong>route：</strong>匹配 URL 的准则（类似正则表达式），匹配顺序从上到下依次排序</li><li><strong>view：</strong> Django匹配到某个路由条目时，自动将封装的<code>HttpRequest</code>对象作为第一个参数，被“捕获”的参数以关键字参数的形式，传递给该条目指定的视图view。</li><li><strong>kwargs（关键词参数）：</strong>任意数量的关键字参数可以作为一个字典传递给目标视图。</li><li><strong>name：</strong>全局变量名 防止写死</li></ul><h3 id="views-py-文件备注"><a href="#views-py-文件备注" class="headerlink" title="views.py 文件备注"></a>views.py 文件备注</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    </span><br><span class="line">    selected_choice = question.choice_set.get(pk=request.POST[<span class="string">'choice'</span>])</span><br><span class="line">    <span class="comment"># request.POST['choice']获取request中的post传来的字典对象 值永远为字符串</span></span><br><span class="line">    <span class="comment"># request.GET['choice'] 同理</span></span><br><span class="line">    </span><br><span class="line">    question = get_object_or_404(Question, pk=question_id) </span><br><span class="line">    <span class="comment"># get_object_or_404()快捷方式，，用来代替get()如果查询不到会自动弹出404错误 get_list_or_404()用来代替filter()</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="comment">#...</span></span><br></pre></td></tr></table></figure><p>当路由匹配时会执行相应函数</p><p>无论如何views.py中的函数会接受<code>request</code>对象，处理后返回一个<code>HttpResponse</code>类的对象，<code>HttpResponse</code>里面的参数就是返回给浏览器显示的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> HttpResponse(<span class="string">"Hello, world. You're at the polls index."</span>) <span class="comment"># 返回方式1</span></span><br><span class="line"><span class="keyword">return</span> HttpResponse(template.render(context, request)) <span class="comment"># 返回方式2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> render(request, <span class="string">'polls/index.html'</span>, context) <span class="comment">#第二种的快捷方式 常用</span></span><br></pre></td></tr></table></figure><p>render()需要三个参数：</p><ul><li>请求对象request（就是view函数的第一个参数）</li><li>模板</li><li>一个字典，包含需要传递给模板的数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'polls:results'</span>, args=(question.id,)))</span><br><span class="line"><span class="comment"># HttpResponseRedirect 重定向</span></span><br><span class="line">    <span class="comment"># reverse() 防止硬编码</span></span><br><span class="line"><span class="keyword">return</span> redirect(<span class="string">"/some/url/"</span>) <span class="comment">#新版本</span></span><br></pre></td></tr></table></figure><p>HttpResponseRedirect()需要一个参数：url</p><blockquote><p>在处理完POST请求后应该后面加上重定向，防止浏览器刷新重复提交</p></blockquote><p>reverse()函数需要2个值</p><ul><li>url的命名</li><li>arg：传给url的值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">"res"</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="keyword">return</span> JsonResponse([&#123;<span class="string">"res"</span>:<span class="number">2</span>&#125;,&#123;<span class="string">"res1"</span>:<span class="number">2</span>&#125;] , safe=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>返回json格式的参数，函数内需要一个字典(默认)，如果需要返回json格式的list，需要设置safe=False</p><h3 id="model-py-文件备注"><a href="#model-py-文件备注" class="headerlink" title="model.py 文件备注"></a>model.py 文件备注</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    question_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    pub_date = models.DateTimeField(<span class="string">'date published'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.question_text</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">was_published_recently</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.pub_date &gt;= timezone.now() - datetime.timedelta(days=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Choice</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    question = models.ForeignKey(Question, on_delete=models.CASCADE) <span class="comment"># on_delete必填</span></span><br><span class="line">    <span class="comment"># 一对多关联 关联写在多的一方</span></span><br><span class="line">    choice_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    votes = models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.choice_text</span><br></pre></td></tr></table></figure><p>一个类就是一个表,该例子中创建了 Question和 Choice 2个表，有question_text，pub_date等字段。</p><p>字段类型通常有以下可选项：</p><ul><li>AutoField：自动增长的IntegerField，通常不用指定</li><li>BooleanField：布尔字段，值为True或False</li><li>NullBooleanField：支持Null、True、False三种值</li><li>CharField(max_length=字符长度)：字符串 。必须接收一个max_length参数</li><li>IntegerField：整数</li><li>FloatField：浮点数</li><li>DateField(auto_now=False, auto_now_add=False)：日期<ul><li>参数auto_now表示每次保存对象时，自动设置该字段为当前时间，用于”最后一次修改”的时间戳，默认为false</li><li>参数auto_now_add表示当对象’’第一次被创建’’时自动设置当前时间，默认为false</li><li>参数auto_now_add和auto_now是相互排斥的，组合将会发生错误</li></ul></li><li>TimeField：时间，参数同DateField</li><li>DateTimeField：日期时间，参数同DateField</li></ul><p>约束选项：</p><ul><li>null：如果为 True，表示允许为空，默认值是 False</li><li>blank：如果为 True，则该字段允许为空白，默认值是 False。对比：null 是数据库范畴的概念，blank 是表单验证范畴的。</li><li>db_index：若值为 True, 则在表中会为此字段创建索引，默认值是 False。</li><li>default：默认值。</li><li>primary_key：若为 True，则该字段会成为模型的主键字段，默认值是 False，一般作为 AutoField 的选项使用。</li><li>unique：如果为 True, 这个字段在表中必须有唯一值，默认值是 False。</li></ul><p>使用一下api对数据库进行操控：</p><p> <strong>创建:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式一</span></span><br><span class="line">q = Question(question_text=<span class="string">"What's new?"</span>, pub_date=timezone.now()) </span><br><span class="line">q.save() <span class="comment"># 在Question表中创建一行数据,q为游标</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line">Blog.objects.create(name=<span class="string">'Beatles Blog'</span>, tagline=<span class="string">'All the latest Beatles news.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式三 带关联的查询</span></span><br><span class="line">q = Question.objects.get(pk=<span class="number">1</span>)</span><br><span class="line">q.choice_set.create(choice_text=<span class="string">'Not much'</span>, votes=<span class="number">0</span>) <span class="comment"># 在choice中创建一条关联q的数据</span></span><br></pre></td></tr></table></figure><p><strong>调用和修改</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">q.question_text</span><br><span class="line">q.question_text = <span class="string">"aaaaaaa"</span></span><br></pre></td></tr></table></figure><p><strong>更新</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法一 可以更新多条</span></span><br><span class="line">User.objects.filter(id=<span class="number">1</span>).update(username=<span class="string">'nick'</span>,is_active=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二 一次只能更新一条 auto_now修饰的字段会更新</span></span><br><span class="line">t = User.objects.get(id=<span class="number">1</span>)</span><br><span class="line">t.username=<span class="string">'nick'</span></span><br><span class="line">t.is_active=<span class="literal">True</span></span><br><span class="line">t.save()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字典或列表更新到数据库中</span></span><br><span class="line">data = &#123;<span class="string">'username'</span>:<span class="string">'nick'</span>,<span class="string">'is_active'</span>:<span class="string">'0'</span>&#125;</span><br><span class="line">User.objects.filter(id=<span class="number">1</span>).update(**data) <span class="comment">#通常我们再变量前加一个星号*表示这个变量是元组/列表，加两个星号表示这个参数是字典</span></span><br></pre></td></tr></table></figure><p><strong>删除</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User.objects.filter(pub_date__year=<span class="number">2005</span>).delete() <span class="comment"># delete()方法</span></span><br><span class="line">User.objects.get(id=<span class="number">1</span>).delete() <span class="comment"># delete()方法</span></span><br></pre></td></tr></table></figure><p><strong>查询数据库所有的question</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Question.objects.all() <span class="comment">#如果修改了类中的_str_函数，则输出更直观 返回对象集</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Question.objects.values() <span class="comment">#返回字典集</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Question.objects.order_by(<span class="string">"-id"</span>)[:<span class="number">6</span>:<span class="number">2</span>] <span class="comment">#按照id的逆排序,取前6个，步长为2</span></span><br></pre></td></tr></table></figure><p><strong>查询</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Question.objects.filter(id=<span class="number">1</span>) <span class="comment">#查询集 多个</span></span><br><span class="line">Blog.objects.filter(title__contains =<span class="string">"django"</span>) <span class="comment">#字段名__contains 包含查询，区分大小写</span></span><br><span class="line">Blog.objects.filter(title__startswith =<span class="string">"django"</span>) <span class="comment">#查询以django为开头</span></span><br><span class="line">Blog.objects.filter(id__in = [<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>])</span><br><span class="line">Blog.objects.filter(id__range =(<span class="number">30</span>,<span class="number">45</span>))</span><br><span class="line">Question.objects.filter(pub_date__year=<span class="number">2005</span>)  <span class="comment">#字段名__year 查询时间的年</span></span><br><span class="line">Question.objects.filter(date__lt=start) <span class="comment"># lt小于 lte小于等于 gt大于 gte大于等于</span></span><br><span class="line"></span><br><span class="line">Question.objects.get(id=<span class="number">1</span>) <span class="comment">#查询单个  如果查询结果为None或者多个都会报错</span></span><br><span class="line">Question.objects.get(pk=<span class="number">1</span>) <span class="comment">#pk为主键</span></span><br></pre></td></tr></table></figure><p><strong>调用所写的方法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q.was_published_recently()</span><br></pre></td></tr></table></figure><p> <strong>关联：通过主表查子表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">teacher.student_set.all() <span class="comment">#默认生成的外键属性，规则为子表名字小写+_set</span></span><br><span class="line">teacher.student_teacher.all() </span><br><span class="line"><span class="comment">#如果在model里设置外键的时候指定了related_name='student_teacher',则效果同上一条一样</span></span><br></pre></td></tr></table></figure><p><strong>关联：通过子表查主表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">student.teacher <span class="comment">#teacher为Student表中的字段名，关联Teacher表</span></span><br></pre></td></tr></table></figure><blockquote><p>使用model的时候记得需要在settings.py中的INSTALLED_APPS内将所创建的app加入</p><p>格式为 <code>INSTALLED_APPS = [&#39;polls&#39;,]</code></p></blockquote><h3 id="HTML模板文件备注"><a href="#HTML模板文件备注" class="headerlink" title="HTML模板文件备注"></a>HTML模板文件备注</h3><p><strong>变量的使用</strong></p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123; variable &#125;&#125;</span><span class="xml"> //variable为render中字典的键</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123; question.question_text &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span> # 访问question的值</span></span><br></pre></td></tr></table></figure><p><strong>过滤器</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shumeipai_name_list = &#123;&#123;shumeipai|safe&#125;&#125; <span class="comment">//在js中使用模板需要加safe过滤器</span></span><br><span class="line">&#123;&#123; value|<span class="keyword">default</span>:<span class="string">"nothing"</span> &#125;&#125; 为变量提供默认值</span><br><span class="line">&#123;&#123; value|date:<span class="string">"Y-m-d H:i:s"</span> &#125;&#125; &#123;&#123; value|time:<span class="string">"H:i"</span> &#125;&#125; 日期格式化</span><br></pre></td></tr></table></figure><p><strong>for标签</strong></p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> athlete <span class="keyword">in</span> athlete_list %&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123; athlete.name &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>if标签</strong></p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> athlete_list %&#125;</span></span><br><span class="line"><span class="xml">    Number of athletes: </span><span class="template-variable">&#123;&#123; athlete_list|<span class="name">length</span> &#125;&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">elif</span></span> athlete_in_locker_room_list %&#125;</span></span><br><span class="line"><span class="xml">    Athletes should be out of the locker room soon!</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">else</span></span> %&#125;</span></span><br><span class="line"><span class="xml">    No athletes.</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br><span class="line"><span class="xml">// </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> athlete_list &gt;1 %&#125;</span><span class="xml"> 可以大于值</span></span><br><span class="line"><span class="xml">// </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> athlete_list and coach_list %&#125;</span><span class="xml"> 连等判断</span></span><br><span class="line"><span class="xml">// </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> not athlete_list or coach_list %&#125;</span></span><br><span class="line"><span class="xml">//</span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> athlete_list == athlete_in_locker_room_list %&#125;</span><span class="xml"> 可以判断等于其他变量，不需要</span><span class="template-variable">&#123;&#123;&#125;&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>关于删除模板文件的硬编码**：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/polls/&#123;&#123; question.id &#125;&#125;/"</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> # 硬编码</span><br></pre></td></tr></table></figure><p>引入路径的name后：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'detail' question.id %&#125;"</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> # 寻找urls.py中的name为 datail 的路径</span><br></pre></td></tr></table></figure><p>再引入app的命名空间后：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'polls:detail' question.id %&#125;"</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> # polls 需要在polls/urls.py中添加app_name = 'polls'方可使用</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>模板的命名空间：</p><p>常用的是<code>polls/templates/polls/index.html</code>用第二层的polls当作命名空间</p></blockquote><h2 id="admin后台管理"><a href="#admin后台管理" class="headerlink" title="admin后台管理"></a>admin后台管理</h2><p><strong>创建管理员账号</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure><p>之后输入用户名和密码，在/admin页面打开即可</p><blockquote><p>记得在setting.py中将语言设置为’zh-hans’,将时区设置为’Asia/Shanghai’</p></blockquote><p><strong>在admin中注册模型</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line">admin.site.register(Question)</span><br></pre></td></tr></table></figure><p>在admin.py中修改即可</p><p><strong>定制admin后台</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuestionAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    fields = [<span class="string">'pub_date'</span>, <span class="string">'question_text'</span>] <span class="comment">#更多字段显示</span></span><br><span class="line"></span><br><span class="line">admin.site.register(Question, QuestionAdmin)</span><br></pre></td></tr></table></figure><p>在admin.py中修改。</p><p>之前注册模型后只能看出单一字段。如需看多字段的话可以创建一个继承<code>admin.ModelAdmin</code>的 类，作为第二参数传递给register即可。</p><p>#其他定制todo</p><p><em>本文学习博客链接：<a href="https://www.liujiangblog.com/course/django/2" target="_blank" rel="noopener">https://www.liujiangblog.com/course/django/2</a></em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;django框架设计模式&quot;&gt;&lt;a href=&quot;#django框架设计模式&quot; class=&quot;headerlink&quot; title=&quot;django框架设计模式&quot;&gt;&lt;/a&gt;django框架设计模式&lt;/h2&gt;&lt;h3 id=&quot;MVC&quot;&gt;&lt;a href=&quot;#MVC&quot; class
      
    
    </summary>
    
    
    
      <category term="django" scheme="https://yaoyue47.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>各种ajax的请求姿势</title>
    <link href="https://yaoyue47.github.io/2020/03/29/%E5%90%84%E7%A7%8Dajax%E7%9A%84%E8%AF%B7%E6%B1%82%E5%A7%BF%E5%8A%BF/"/>
    <id>https://yaoyue47.github.io/2020/03/29/%E5%90%84%E7%A7%8Dajax%E7%9A%84%E8%AF%B7%E6%B1%82%E5%A7%BF%E5%8A%BF/</id>
    <published>2020-03-29T14:37:53.000Z</published>
    <updated>2020-05-24T15:39:27.294Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="关于各种ajax发送post，get请求的姿势"><a href="#关于各种ajax发送post，get请求的姿势" class="headerlink" title="关于各种ajax发送post，get请求的姿势"></a>关于各种ajax发送post，get请求的姿势</h3></blockquote><ul><li><p>jQuery封装的请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.post(<span class="string">"/try/ajax/demo_test_post.php"</span>,&#123;</span><br><span class="line">name:<span class="string">"菜鸟教程"</span>,</span><br><span class="line">url:<span class="string">"http://www.runoob.com"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">data,status</span>)</span>&#123;</span><br><span class="line">alert(<span class="string">"数据: \n"</span> + data + <span class="string">"\n状态: "</span> + status);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="keyword">get</span>("/try/ajax/demo_test.php",function(data,status)&#123;</span><br><span class="line">alert(<span class="string">"数据: "</span> + data + <span class="string">"\n状态: "</span> + status);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>ajax原生请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url:<span class="string">"http://www.microsoft.com"</span>,    <span class="comment">//请求的url地址</span></span><br><span class="line">   dataType:<span class="string">"json"</span>,   <span class="comment">//返回格式为json</span></span><br><span class="line">  <span class="keyword">async</span>:<span class="literal">true</span>,<span class="comment">//请求是否异步，默认为异步，这也是ajax重要特性</span></span><br><span class="line">    data:&#123;<span class="string">"id"</span>:<span class="string">"value"</span>&#125;,    <span class="comment">//参数值</span></span><br><span class="line">   type:<span class="string">"POST"</span>,   <span class="comment">//请求方式</span></span><br><span class="line">  beforeSend:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//请求前的处理</span></span><br><span class="line">  &#125;,</span><br><span class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params">req</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//请求成功时处理</span></span><br><span class="line">    &#125;,</span><br><span class="line">   complete:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//请求完成的处理</span></span><br><span class="line">   &#125;,</span><br><span class="line">   error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//请求出错处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>注：post请求体中也还有不同的格式。待续。。</p></blockquote><h4 id="填坑："><a href="#填坑：" class="headerlink" title="填坑："></a>填坑：</h4><p>请求体中主流有4种格式：</p><ul><li><p>form-data 既可以传输键值对，又可以传输文件。窗体数据被编码为一条消息，页上的每个控件对应消息中的一个部分，用分隔符分开。</p></li><li><p>x-www-form-urlencoded 默认格式，只能传输键值对。窗体数据被编码为<code>name=len&amp;age =28&amp;</code>类似这样</p></li><li><p>raw 可上传任意格式的文本，可以上传text、json、xml、html等各种文本类型</p></li><li><p>binary 二进制文件,通常为文件，且一次只能上传一个文件</p></li></ul><p>原文链接：<a href="https://blog.csdn.net/leyangjun/article/details/79221765" target="_blank" rel="noopener">https://blog.csdn.net/leyangjun/article/details/79221765</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;关于各种ajax发送post，get请求的姿势&quot;&gt;&lt;a href=&quot;#关于各种ajax发送post，get请求的姿势&quot; class=&quot;headerlink&quot; title=&quot;关于各种ajax发送post，get请求的姿势&quot;&gt;&lt;/a&gt;关于各种
      
    
    </summary>
    
    
    
      <category term="前端请求" scheme="https://yaoyue47.github.io/tags/%E5%89%8D%E7%AB%AF%E8%AF%B7%E6%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>post和get的区别</title>
    <link href="https://yaoyue47.github.io/2020/03/29/post%E5%92%8Cget%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://yaoyue47.github.io/2020/03/29/post%E5%92%8Cget%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-03-29T14:28:55.000Z</published>
    <updated>2020-03-29T14:37:24.177Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="关于post和get的一些区别"><a href="#关于post和get的一些区别" class="headerlink" title="关于post和get的一些区别"></a>关于post和get的一些区别</h3></blockquote><ul><li>在浏览器中的get和post：<ul><li>get在浏览器网址处输入即可，参数在url上面。</li><li>post需要form表单，参数在请求体的body上面。</li></ul></li><li>ajax中的get和post：<ul><li>get和post一样，参数的方式由服务段和客户端共同商定</li></ul></li></ul><hr><blockquote><p>post会影响服务器文件，get不会。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;关于post和get的一些区别&quot;&gt;&lt;a href=&quot;#关于post和get的一些区别&quot; class=&quot;headerlink&quot; title=&quot;关于post和get的一些区别&quot;&gt;&lt;/a&gt;关于post和get的一些区别&lt;/h3&gt;&lt;/blockq
      
    
    </summary>
    
    
    
      <category term="前端请求" scheme="https://yaoyue47.github.io/tags/%E5%89%8D%E7%AB%AF%E8%AF%B7%E6%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>写在最前</title>
    <link href="https://yaoyue47.github.io/2020/03/29/%E5%86%99%E5%9C%A8%E6%9C%80%E5%89%8D/"/>
    <id>https://yaoyue47.github.io/2020/03/29/%E5%86%99%E5%9C%A8%E6%9C%80%E5%89%8D/</id>
    <published>2020-03-29T14:12:40.000Z</published>
    <updated>2020-03-29T14:25:38.848Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="写在最前"><a href="#写在最前" class="headerlink" title="写在最前"></a>写在最前</h3></blockquote><p>一直以来只有写微信公众号时会拿起记事本来写东西，可惜已经好久没写了，这次打算开一个技术博客吧，也算记录自己的成长之路，也算当作自己的代码备忘。</p><p>最近这段时间很迷茫，一直在考研和工作之间犹豫徘徊，不知道我能不能成为一名真正的程序员。</p><p>很难得由这么空闲的时间，这么漫长的假期，我一边准备的考试，一边拓展的自己的能力库。也是最近学了git后才想把自己做的很久的梦完成。</p><p>我很久之前看到过别人的<a href="https://github.com/Huxpro/huxpro.github.io" target="_blank" rel="noopener">博客</a>，做的很漂亮，所以就在心里埋了一个种子。虽然模板是别人的，托管是github的，但是好歹里里面的内容是自己的。以后看到会很有感触吧。</p><p>不写随笔很多年，以后应该都是技术文章了，第一篇文章写于2020年3月27日，<strong>写给自己的梦</strong>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;写在最前&quot;&gt;&lt;a href=&quot;#写在最前&quot; class=&quot;headerlink&quot; title=&quot;写在最前&quot;&gt;&lt;/a&gt;写在最前&lt;/h3&gt;&lt;/blockquote&gt;
&lt;p&gt;一直以来只有写微信公众号时会拿起记事本来写东西，可惜已经好久没写了，这
      
    
    </summary>
    
    
    
      <category term="随笔" scheme="https://yaoyue47.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://yaoyue47.github.io/2020/03/26/hello-world/"/>
    <id>https://yaoyue47.github.io/2020/03/26/hello-world/</id>
    <published>2020-03-25T16:09:53.453Z</published>
    <updated>2020-03-25T16:09:53.453Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
