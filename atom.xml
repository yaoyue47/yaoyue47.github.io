<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>云图-Blog</title>
  
  <subtitle>那些未完成的梦</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yaoyue47.github.io/"/>
  <updated>2020-04-11T14:19:37.907Z</updated>
  <id>https://yaoyue47.github.io/</id>
  
  <author>
    <name>姚越</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git全攻略</title>
    <link href="https://yaoyue47.github.io/2020/04/11/git%E5%85%A8%E6%94%BB%E7%95%A5/"/>
    <id>https://yaoyue47.github.io/2020/04/11/git%E5%85%A8%E6%94%BB%E7%95%A5/</id>
    <published>2020-04-11T11:33:52.000Z</published>
    <updated>2020-04-11T14:19:37.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="本地git全攻略"><a href="#本地git全攻略" class="headerlink" title="本地git全攻略"></a>本地git全攻略</h1><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><ul><li>当已经有文件的时候：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd folder</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><ul><li>没有文件时：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd folder_name</span><br><span class="line">git init projects_name</span><br></pre></td></tr></table></figure><p>出现 <code>.git</code> 文件夹即表示完成创建</p><blockquote><p>查询当前的git用户配置信息用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git config --global --list</span><br></pre></td></tr></table></figure></blockquote><h3 id="git提交版本"><a href="#git提交版本" class="headerlink" title="git提交版本"></a>git提交版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add file_name </span><br><span class="line">git add .   #提交到缓存空间</span><br><span class="line">git commit -m &#39;版本信息&#39; #正式提交版本</span><br></pre></td></tr></table></figure><blockquote><p>使用<code>.gitignore</code>文件来说明哪些文件不被版本控制</p></blockquote><h3 id="版本状态查看"><a href="#版本状态查看" class="headerlink" title="版本状态查看"></a>版本状态查看</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">git status -s #简短形式展示</span><br></pre></td></tr></table></figure><p>文件名显示红色表示未存至缓存空间</p><p>文件名显示绿色表示未正式提交</p><h3 id="查看历史版本"><a href="#查看历史版本" class="headerlink" title="查看历史版本"></a>查看历史版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br><span class="line">git log --pretty&#x3D;oneline #单行显示</span><br><span class="line">git log -p #显示版本之间的差别</span><br></pre></td></tr></table></figure><h3 id="版本对比"><a href="#版本对比" class="headerlink" title="版本对比"></a>版本对比</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git diff #查看工作区代码和最新版本的不同</span><br><span class="line">git diff --staged #查看暂存区和最新版本有什么不同</span><br><span class="line">git diff 老版本号 新版本号 # 查看老新之间区别</span><br></pre></td></tr></table></figure><h3 id="工作区回滚"><a href="#工作区回滚" class="headerlink" title="工作区回滚"></a>工作区回滚</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git restore file_name #从暂存区回滚到工作区 与add命令相反</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git restore --staged file_name #撤回add命令</span><br></pre></td></tr></table></figure><h3 id="版本回滚"><a href="#版本回滚" class="headerlink" title="版本回滚"></a>版本回滚</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout 版本号</span><br><span class="line">git checkout 标签名</span><br><span class="line">git reset --hard 版本号 #将所有的暂存区工作区内容恢复成指定版本</span><br><span class="line">这2个命令有区别，什么区别呢，老子也不懂（跟head什么的有关）</span><br></pre></td></tr></table></figure><h3 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag tag_name #将当前的最新版本打标签</span><br></pre></td></tr></table></figure><p>tag标签，常用于v1.0.1之类的版本号</p><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git branch # 列出所有分支</span><br><span class="line">git branch branch_name #创建分支</span><br><span class="line">git checkout branch_name #切换分支</span><br><span class="line">git merge branch_name#合并分支</span><br></pre></td></tr></table></figure><h1 id="github远程仓库全攻略"><a href="#github远程仓库全攻略" class="headerlink" title="github远程仓库全攻略"></a>github远程仓库全攻略</h1><h3 id="查看远程配置"><a href="#查看远程配置" class="headerlink" title="查看远程配置"></a>查看远程配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br><span class="line">git remote 远程地址名 远程地址 #添加远程地址</span><br></pre></td></tr></table></figure><h3 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push 远程地址名 master #推送至远程仓库</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch 远程地址名 #将远程地址下载到本地后，不合并</span><br><span class="line">git pull 远程地址名 master #将远程仓库下载到本地，然后直接合并</span><br><span class="line">git pull&#x3D;git fetch + git merge</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone url #克隆别人的项目</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;本地git全攻略&quot;&gt;&lt;a href=&quot;#本地git全攻略&quot; class=&quot;headerlink&quot; title=&quot;本地git全攻略&quot;&gt;&lt;/a&gt;本地git全攻略&lt;/h1&gt;&lt;h3 id=&quot;创建仓库&quot;&gt;&lt;a href=&quot;#创建仓库&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
    
      <category term="git" scheme="https://yaoyue47.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>学习django第二天</title>
    <link href="https://yaoyue47.github.io/2020/04/11/%E5%AD%A6%E4%B9%A0django%E7%AC%AC%E4%BA%8C%E5%A4%A9/"/>
    <id>https://yaoyue47.github.io/2020/04/11/%E5%AD%A6%E4%B9%A0django%E7%AC%AC%E4%BA%8C%E5%A4%A9/</id>
    <published>2020-04-11T03:35:06.000Z</published>
    <updated>2020-04-13T15:56:11.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于HttpResponse"><a href="#关于HttpResponse" class="headerlink" title="关于HttpResponse"></a>关于HttpResponse</h1><p>HttpResponse是一个对象。</p><p>可以在返回的时候申明返回的类型<code>content_type</code>，也可以选择默认</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> HttpResponse(my_data, content_type=<span class="string">'application/json'</span>, status=<span class="number">200</span>)</span><br></pre></td></tr></table></figure><p>拥有以下特性：</p><p><strong>属性：</strong></p><p>HttpResponse.status_code</p><p>响应的状态码，比如200。</p><p><strong>子类：</strong></p><ul><li>class HttpResponseRedirect[source]：重定向，返回302状态码。已经被redirect()替代。？</li><li>class HttpResponseBadRequest[source]：错误的请求，返回400状态码。</li><li>class HttpResponseNotFound[source]：页面不存在，返回404状态码。</li><li>class HttpResponseForbidden[source]：禁止访问，返回403状态码。</li><li>class HttpResponseNotAllowed[source]：禁止访问，返回405状态码。</li><li>class HttpResponseServerError[source]：服务器错误，返回500状态码。</li></ul><h1 id="关于-HttpRequest"><a href="#关于-HttpRequest" class="headerlink" title="关于 HttpRequest"></a>关于 HttpRequest</h1><p>HttpRequest是一个对象，拥有以下特性：</p><p><strong>属性：</strong></p><p>HttpRequest.scheme</p><p>字符串类型，表示请求的协议种类，’http’或’https’。</p><p>HttpRequest.path</p><p>字符串类型，表示当前请求页面的完整路径，但是不包括协议名和域名。例如：”/music/bands/the_beatles/“。</p><p>HttpRequest.method</p><p>字符串类型，请求的方式，有”POST”和”GET”</p><p>HttpRequest.COOKIES</p><p>包含所有Cookie信息的字典。</p><h1 id="关于-cookie和session"><a href="#关于-cookie和session" class="headerlink" title="关于 cookie和session"></a>关于 cookie和session</h1><p>#todo</p><h1 id="关于序列化"><a href="#关于序列化" class="headerlink" title="关于序列化"></a>关于序列化</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core <span class="keyword">import</span> serializers</span><br><span class="line">data = serializers.serialize(<span class="string">"json"</span>, SomeModel.objects.all())</span><br><span class="line">data = serializers.serialize(<span class="string">'xml'</span>, SomeModel.objects.all(), fields=(<span class="string">'name'</span>,<span class="string">'size'</span>)) <span class="comment">#有选择的序列化</span></span><br></pre></td></tr></table></figure><p>序列化主要是将模型model中的查询结果（QuerySet对象）转化成符合”json”,”xml”,”yaml”等格式的字符串</p><p>实践后发现序列化后格式是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;pk&quot;: &quot;4b678b301dfd8a4e0dad910de3ae245b&quot;,</span><br><span class="line">        &quot;model&quot;: &quot;sessions.session&quot;,</span><br><span class="line">        &quot;fields&quot;: &#123;</span><br><span class="line">            &quot;expire_date&quot;: &quot;2013-01-16T08:16:59.844Z&quot;,</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;关于HttpResponse&quot;&gt;&lt;a href=&quot;#关于HttpResponse&quot; class=&quot;headerlink&quot; title=&quot;关于HttpResponse&quot;&gt;&lt;/a&gt;关于HttpResponse&lt;/h1&gt;&lt;p&gt;HttpResponse是一个对象。&lt;/p&gt;
      
    
    </summary>
    
    
    
      <category term="django" scheme="https://yaoyue47.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>学习django第一天</title>
    <link href="https://yaoyue47.github.io/2020/04/07/%E5%AD%A6%E4%B9%A0django%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
    <id>https://yaoyue47.github.io/2020/04/07/%E5%AD%A6%E4%B9%A0django%E7%AC%AC%E4%B8%80%E5%A4%A9/</id>
    <published>2020-04-07T13:53:40.000Z</published>
    <updated>2020-04-11T03:45:06.399Z</updated>
    
    <content type="html"><![CDATA[<h2 id="django框架设计模式"><a href="#django框架设计模式" class="headerlink" title="django框架设计模式"></a>django框架设计模式</h2><h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><p><strong>模型(Model)：</strong></p><p>Web框架和数据库的交互层。</p><p><strong>视图(View)：</strong></p><p>负责数据的显示和呈现，是对用户的直接输出。</p><p><strong>控制器(Controller)：</strong></p><p>负责从用户端收集用户的输入，可以看成提供View的反向功能。</p><h3 id="MTV（即django所用设计模式）"><a href="#MTV（即django所用设计模式）" class="headerlink" title="MTV（即django所用设计模式）"></a>MTV（即django所用设计模式）</h3><p><strong>模型(Model)：</strong></p><p>通过orm的方式,即一个python中的类来表示数据库中的一个表。本意为设计数据库的结构。</p><p><strong>模板(Template)</strong>：</p><p>本质为html文件填入了模板语言。</p><p><strong>视图(View)：</strong></p><p>主要逻辑所在的地方，纯python代码，来控制模板可以获得什么数据。</p><h3 id="django的模型组织参考："><a href="#django的模型组织参考：" class="headerlink" title="django的模型组织参考："></a>django的模型组织参考：</h3><p><img src="/img/%E5%AD%A6%E4%B9%A0django%E7%AC%AC%E4%B8%80%E5%A4%A9.png" alt="84-3"></p><h2 id="django常用命令："><a href="#django常用命令：" class="headerlink" title="django常用命令："></a>django常用命令：</h2><p>创建项目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject mysite</span><br></pre></td></tr></table></figure><p>启动项目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver <span class="comment">#默认8000端口</span></span><br></pre></td></tr></table></figure><p>创建app：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp polls</span><br></pre></td></tr></table></figure><p>将model.py的代码转换成实际数据库结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p>创建迁移文件 <code>polls/migrations/0001_initial.py</code> 方便git记录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br></pre></td></tr></table></figure><h2 id="django-路径文件说明："><a href="#django-路径文件说明：" class="headerlink" title="django 路径文件说明："></a>django 路径文件说明：</h2><h3 id="urls-py文件备注"><a href="#urls-py文件备注" class="headerlink" title="urls.py文件备注"></a>urls.py文件备注</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'polls/'</span>, include(<span class="string">'polls.urls'</span>)),<span class="comment"># 分给二级路由</span></span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),<span class="comment">#匹配admin后台管理的路由</span></span><br><span class="line">]</span><br><span class="line"><span class="comment"># 下面为二级路由 #</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># ex: /polls/</span></span><br><span class="line">    path(<span class="string">''</span>, views.index, name=<span class="string">'index'</span>),</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># ex: /polls/5/</span></span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/'</span>, views.detail, name=<span class="string">'detail'</span>),</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># ex: /polls/5/results/</span></span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/results/'</span>, views.results, name=<span class="string">'results'</span>),</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># ex: /polls/5/vote/</span></span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/vote/'</span>, views.vote, name=<span class="string">'vote'</span>),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>urlpatterns内为各路路由</p><p>path函数内有四个值：匹配的路径表达式，调用的views的函数，路径的名称（可省略）</p><ul><li><strong>route：</strong>匹配 URL 的准则（类似正则表达式），匹配顺序从上到下依次排序</li><li><strong>view：</strong> Django匹配到某个路由条目时，自动将封装的<code>HttpRequest</code>对象作为第一个参数，被“捕获”的参数以关键字参数的形式，传递给该条目指定的视图view。</li><li><strong>kwargs（关键词参数）：</strong>任意数量的关键字参数可以作为一个字典传递给目标视图。</li><li><strong>name：</strong>全局变量名 防止写死</li></ul><h3 id="views-py-文件备注"><a href="#views-py-文件备注" class="headerlink" title="views.py 文件备注"></a>views.py 文件备注</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    </span><br><span class="line">    selected_choice = question.choice_set.get(pk=request.POST[<span class="string">'choice'</span>])</span><br><span class="line">    <span class="comment"># request.POST['choice']获取request中的post传来的字典对象 值永远为字符串</span></span><br><span class="line">    <span class="comment"># request.GET['choice'] 同理</span></span><br><span class="line">    </span><br><span class="line">    question = get_object_or_404(Question, pk=question_id) </span><br><span class="line">    <span class="comment"># get_object_or_404()快捷方式，，用来代替get()如果查询不到会自动弹出404错误 get_list_or_404()用来代替filter()</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="comment">#...</span></span><br></pre></td></tr></table></figure><p>当路由匹配时会执行相应函数</p><p>无论如何views.py中的函数会接受<code>request</code>对象，处理后返回一个<code>HttpResponse</code>类的对象，<code>HttpResponse</code>里面的参数就是返回给浏览器显示的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> HttpResponse(<span class="string">"Hello, world. You're at the polls index."</span>) <span class="comment"># 返回方式1</span></span><br><span class="line"><span class="keyword">return</span> HttpResponse(template.render(context, request)) <span class="comment"># 返回方式2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> render(request, <span class="string">'polls/index.html'</span>, context) <span class="comment">#第二种的快捷方式 常用</span></span><br></pre></td></tr></table></figure><p>render()需要三个参数：</p><ul><li>请求对象request（就是view函数的第一个参数）</li><li>模板</li><li>一个字典，包含需要传递给模板的数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'polls:results'</span>, args=(question.id,)))</span><br><span class="line"><span class="comment"># HttpResponseRedirect 重定向</span></span><br><span class="line">    <span class="comment"># reverse() 防止硬编码</span></span><br></pre></td></tr></table></figure><p>HttpResponseRedirect()需要一个参数：url</p><blockquote><p>在处理完POST请求后应该后面加上重定向，防止浏览器刷新重复提交</p></blockquote><p>reverse()函数需要2个值</p><ul><li>url的命名</li><li>arg：传给url的值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">"res"</span>: <span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><p>返回json格式的参数，函数内需要一个字典</p><h3 id="model-py-文件备注"><a href="#model-py-文件备注" class="headerlink" title="model.py 文件备注"></a>model.py 文件备注</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    question_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    pub_date = models.DateTimeField(<span class="string">'date published'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.question_text</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">was_published_recently</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.pub_date &gt;= timezone.now() - datetime.timedelta(days=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Choice</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    question = models.ForeignKey(Question, on_delete=models.CASCADE)</span><br><span class="line">    choice_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    votes = models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.choice_text</span><br></pre></td></tr></table></figure><p>一个类就是一个表,该例子中创建了 Question和 Choice 2个表，有question_text，pub_date等字段。</p><p>字段类型通常有以下可选项：</p><ul><li>AutoField：自动增长的IntegerField，通常不用指定</li><li>BooleanField：布尔字段，值为True或False</li><li>NullBooleanField：支持Null、True、False三种值</li><li>CharField(max_length=字符长度)：字符串</li><li>IntegerField：整数</li><li>FloatField：浮点数</li><li>DateField[auto_now=False, auto_now_add=False])：日期<ul><li>参数auto_now表示每次保存对象时，自动设置该字段为当前时间，用于”最后一次修改”的时间戳，默认为false</li><li>参数auto_now_add表示当对象’’第一次被创建’’时自动设置当前时间，默认为false</li><li>参数auto_now_add和auto_now是相互排斥的，组合将会发生错误</li></ul></li><li>TimeField：时间，参数同DateField</li><li>DateTimeField：日期时间，参数同DateField</li></ul><p>约束选项：</p><ul><li>null：如果为 True，表示允许为空，默认值是 False</li><li>blank：如果为 True，则该字段允许为空白，默认值是 False。对比：null 是数据库范畴的概念，blank 是表单验证范畴的。</li><li>db_index：若值为 True, 则在表中会为此字段创建索引，默认值是 False。</li><li>default：默认值。</li><li>unique：如果为 True, 这个字段在表中必须有唯一值，默认值是 False。</li></ul><p>使用一下api对数据库进行操控：</p><p> <strong>创建:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q = Question(question_text=<span class="string">"What's new?"</span>, pub_date=timezone.now()) <span class="comment"># 在Question表中创建一行数据,q为游标</span></span><br></pre></td></tr></table></figure><p><strong>保存</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q.save()</span><br></pre></td></tr></table></figure><p><strong>调用和修改</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">q.question_text</span><br><span class="line">q.question_text = <span class="string">"aaaaaaa"</span></span><br></pre></td></tr></table></figure><p><strong>查询数据库所有的question</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Question.objects.all() <span class="comment">#如果修改了类中的_str_函数，则输出更直观</span></span><br></pre></td></tr></table></figure><p><strong>查询</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Question.objects.filter(id=<span class="number">1</span>) <span class="comment">#查询集 多个</span></span><br><span class="line">Question.objects.get(id=<span class="number">1</span>) <span class="comment">#查询单个</span></span><br><span class="line">Question.objects.get(pk=<span class="number">1</span>) <span class="comment">#pk为主键</span></span><br></pre></td></tr></table></figure><p><strong>调用所写的方法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q.was_published_recently()</span><br></pre></td></tr></table></figure><p><strong>创建</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q.choice_set.create(choice_text=<span class="string">'Not much'</span>, votes=<span class="number">0</span>) <span class="comment">#choice_set是设置了choice后自动生成</span></span><br></pre></td></tr></table></figure><blockquote><p>使用model的时候记得需要在settings.py中的INSTALLED_APPS内将所创建的app加入</p><p>格式为 <code>INSTALLED_APPS = [&#39;polls&#39;,]</code></p></blockquote><h3 id="HTML模板文件备注"><a href="#HTML模板文件备注" class="headerlink" title="HTML模板文件备注"></a>HTML模板文件备注</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> # 访问question的值</span><br></pre></td></tr></table></figure><blockquote><p><strong>关于删除模板文件的硬编码</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/polls/&#123;&#123; question.id &#125;&#125;/"</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> # 硬编码</span><br></pre></td></tr></table></figure><p>引入路径的name后：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'detail' question.id %&#125;"</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> # 寻找urls.py中的name为 datail 的路径</span><br></pre></td></tr></table></figure><p>再引入app的命名空间后：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'polls:detail' question.id %&#125;"</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> # polls 需要在polls/urls.py中添加app_name = 'polls'方可使用</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>解决跨站请求伪造的安全问题</strong></p><p>将{ %csrf_token% }加入form表单任意位置</p></blockquote><blockquote><p>模板的命名空间：</p><p>常用的是<code>polls/templates/polls/index.html</code>用第二层的polls当作命名空间</p></blockquote><h2 id="admin后台管理"><a href="#admin后台管理" class="headerlink" title="admin后台管理"></a>admin后台管理</h2><p><strong>创建管理员账号</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure><p>之后输入用户名和密码，在/admin页面打开即可</p><blockquote><p>记得在setting.py中将语言设置为’zh-hans’,将时区设置为’Asia/Shanghai’</p></blockquote><p><strong>在admin中注册模型</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line">admin.site.register(Question)</span><br></pre></td></tr></table></figure><p>在admin.py中修改即可</p><p><strong>定制admin后台</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuestionAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    fields = [<span class="string">'pub_date'</span>, <span class="string">'question_text'</span>] <span class="comment">#更多字段显示</span></span><br><span class="line"></span><br><span class="line">admin.site.register(Question, QuestionAdmin)</span><br></pre></td></tr></table></figure><p>在admin.py中修改。</p><p>之前注册模型后只能看出单一字段。如需看多字段的话可以创建一个继承<code>admin.ModelAdmin</code>的 类，作为第二参数传递给register即可。</p><p>#其他定制todo</p><p><em>本文学习博客链接：<a href="https://www.liujiangblog.com/course/django/2" target="_blank" rel="noopener">https://www.liujiangblog.com/course/django/2</a></em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;django框架设计模式&quot;&gt;&lt;a href=&quot;#django框架设计模式&quot; class=&quot;headerlink&quot; title=&quot;django框架设计模式&quot;&gt;&lt;/a&gt;django框架设计模式&lt;/h2&gt;&lt;h3 id=&quot;MVC&quot;&gt;&lt;a href=&quot;#MVC&quot; class
      
    
    </summary>
    
    
    
      <category term="django" scheme="https://yaoyue47.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>各种ajax的请求姿势</title>
    <link href="https://yaoyue47.github.io/2020/03/29/%E5%90%84%E7%A7%8Dajax%E7%9A%84%E8%AF%B7%E6%B1%82%E5%A7%BF%E5%8A%BF/"/>
    <id>https://yaoyue47.github.io/2020/03/29/%E5%90%84%E7%A7%8Dajax%E7%9A%84%E8%AF%B7%E6%B1%82%E5%A7%BF%E5%8A%BF/</id>
    <published>2020-03-29T14:37:53.000Z</published>
    <updated>2020-03-29T14:47:56.733Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="关于各种ajax发送post，get请求的姿势"><a href="#关于各种ajax发送post，get请求的姿势" class="headerlink" title="关于各种ajax发送post，get请求的姿势"></a>关于各种ajax发送post，get请求的姿势</h3></blockquote><ul><li><p>jQuery封装的请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.post(<span class="string">"/try/ajax/demo_test_post.php"</span>,&#123;</span><br><span class="line">name:<span class="string">"菜鸟教程"</span>,</span><br><span class="line">url:<span class="string">"http://www.runoob.com"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">data,status</span>)</span>&#123;</span><br><span class="line">alert(<span class="string">"数据: \n"</span> + data + <span class="string">"\n状态: "</span> + status);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="keyword">get</span>("/try/ajax/demo_test.php",function(data,status)&#123;</span><br><span class="line">alert(<span class="string">"数据: "</span> + data + <span class="string">"\n状态: "</span> + status);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>ajax原生请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url:<span class="string">"http://www.microsoft.com"</span>,    <span class="comment">//请求的url地址</span></span><br><span class="line">   dataType:<span class="string">"json"</span>,   <span class="comment">//返回格式为json</span></span><br><span class="line">  <span class="keyword">async</span>:<span class="literal">true</span>,<span class="comment">//请求是否异步，默认为异步，这也是ajax重要特性</span></span><br><span class="line">    data:&#123;<span class="string">"id"</span>:<span class="string">"value"</span>&#125;,    <span class="comment">//参数值</span></span><br><span class="line">   type:<span class="string">"POST"</span>,   <span class="comment">//请求方式</span></span><br><span class="line">  beforeSend:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//请求前的处理</span></span><br><span class="line">  &#125;,</span><br><span class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params">req</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//请求成功时处理</span></span><br><span class="line">    &#125;,</span><br><span class="line">   complete:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//请求完成的处理</span></span><br><span class="line">   &#125;,</span><br><span class="line">   error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//请求出错处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>注：post请求体中也还有不同的格式。待续。。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;关于各种ajax发送post，get请求的姿势&quot;&gt;&lt;a href=&quot;#关于各种ajax发送post，get请求的姿势&quot; class=&quot;headerlink&quot; title=&quot;关于各种ajax发送post，get请求的姿势&quot;&gt;&lt;/a&gt;关于各种
      
    
    </summary>
    
    
    
      <category term="前端请求" scheme="https://yaoyue47.github.io/tags/%E5%89%8D%E7%AB%AF%E8%AF%B7%E6%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>post和get的区别</title>
    <link href="https://yaoyue47.github.io/2020/03/29/post%E5%92%8Cget%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://yaoyue47.github.io/2020/03/29/post%E5%92%8Cget%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-03-29T14:28:55.000Z</published>
    <updated>2020-03-29T14:37:24.177Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="关于post和get的一些区别"><a href="#关于post和get的一些区别" class="headerlink" title="关于post和get的一些区别"></a>关于post和get的一些区别</h3></blockquote><ul><li>在浏览器中的get和post：<ul><li>get在浏览器网址处输入即可，参数在url上面。</li><li>post需要form表单，参数在请求体的body上面。</li></ul></li><li>ajax中的get和post：<ul><li>get和post一样，参数的方式由服务段和客户端共同商定</li></ul></li></ul><hr><blockquote><p>post会影响服务器文件，get不会。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;关于post和get的一些区别&quot;&gt;&lt;a href=&quot;#关于post和get的一些区别&quot; class=&quot;headerlink&quot; title=&quot;关于post和get的一些区别&quot;&gt;&lt;/a&gt;关于post和get的一些区别&lt;/h3&gt;&lt;/blockq
      
    
    </summary>
    
    
    
      <category term="前端请求" scheme="https://yaoyue47.github.io/tags/%E5%89%8D%E7%AB%AF%E8%AF%B7%E6%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>写在最前</title>
    <link href="https://yaoyue47.github.io/2020/03/29/%E5%86%99%E5%9C%A8%E6%9C%80%E5%89%8D/"/>
    <id>https://yaoyue47.github.io/2020/03/29/%E5%86%99%E5%9C%A8%E6%9C%80%E5%89%8D/</id>
    <published>2020-03-29T14:12:40.000Z</published>
    <updated>2020-03-29T14:25:38.848Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="写在最前"><a href="#写在最前" class="headerlink" title="写在最前"></a>写在最前</h3></blockquote><p>一直以来只有写微信公众号时会拿起记事本来写东西，可惜已经好久没写了，这次打算开一个技术博客吧，也算记录自己的成长之路，也算当作自己的代码备忘。</p><p>最近这段时间很迷茫，一直在考研和工作之间犹豫徘徊，不知道我能不能成为一名真正的程序员。</p><p>很难得由这么空闲的时间，这么漫长的假期，我一边准备的考试，一边拓展的自己的能力库。也是最近学了git后才想把自己做的很久的梦完成。</p><p>我很久之前看到过别人的<a href="https://github.com/Huxpro/huxpro.github.io" target="_blank" rel="noopener">博客</a>，做的很漂亮，所以就在心里埋了一个种子。虽然模板是别人的，托管是github的，但是好歹里里面的内容是自己的。以后看到会很有感触吧。</p><p>不写随笔很多年，以后应该都是技术文章了，第一篇文章写于2020年3月27日，<strong>写给自己的梦</strong>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;写在最前&quot;&gt;&lt;a href=&quot;#写在最前&quot; class=&quot;headerlink&quot; title=&quot;写在最前&quot;&gt;&lt;/a&gt;写在最前&lt;/h3&gt;&lt;/blockquote&gt;
&lt;p&gt;一直以来只有写微信公众号时会拿起记事本来写东西，可惜已经好久没写了，这
      
    
    </summary>
    
    
    
      <category term="随笔" scheme="https://yaoyue47.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://yaoyue47.github.io/2020/03/26/hello-world/"/>
    <id>https://yaoyue47.github.io/2020/03/26/hello-world/</id>
    <published>2020-03-25T16:09:53.453Z</published>
    <updated>2020-03-25T16:09:53.453Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
